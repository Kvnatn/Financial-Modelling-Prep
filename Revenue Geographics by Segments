{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "27e6d38b",
   "metadata": {},
   "source": [
    "# FMP Stock Fundamentals Exploration 4 : Revenue Geographic by Segments"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fca42fee",
   "metadata": {},
   "source": [
    "Welcome to this Jupyter Notebook of the Finsloth.\n",
    "\n",
    "In this first Notebook of our series, we are going to explore the first element of FMP Stock Fundamentals which is a Financial Statement.\n",
    "\n",
    "Our goal is to understand **the meaning and the structure of each data given by FMP, how to transform it for actual use in any trading or investing strategies**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08ae93e4",
   "metadata": {},
   "source": [
    "## About Financial Modeling Prep\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "904e9deb",
   "metadata": {},
   "source": [
    "Financial Modeling Prep is a stock market API that provides a wide range of data. Data covers stocks, crypto forex and commodities.\n",
    "\n",
    "You have addition data such as institutional stock ownership, esg score, price target, etc.\n",
    "\n",
    "There are several plans including a free one.\n",
    "\n",
    "I am on a start plan for this notebook. Here are the link for the pricing: https://site.financialmodelingprep.com/developer/docs/pricing/"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "219ab9ff",
   "metadata": {},
   "source": [
    "## Revenue by regions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f7ce180",
   "metadata": {},
   "source": [
    "While this not a complete dive into sales, it's more of an annex to the actual sales of a company, and the exploration of how to see data from the geographic angle.\n",
    "\n",
    "I've already posted in my github a notebook about sales: https://github.com/Kvnatn/Thefinsloth-JupyterNotebook/blob/main/FMP%20-%20Stock%20Fundamentals%20Exploration%20-%20Sales.ipynb"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32d110b1",
   "metadata": {},
   "source": [
    "## Initial Import and API Key"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "baa64dbd",
   "metadata": {},
   "source": [
    "In this section, we are going to perform classic libraries import to perform our data transformation and visualisation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "76fb6c58",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We import the basics and some specific to APIs libraries\n",
    "\n",
    "# Data Manipulation Librairies\n",
    "import pandas as pd\n",
    "\n",
    "# requests is another way of sending an API request to FMP\n",
    "import requests\n",
    "\n",
    "# json library makes it easier to access JSON format\n",
    "import json\n",
    "\n",
    "# Datavisualization Library\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1ab6b9d",
   "metadata": {},
   "source": [
    "For privacy reason, I have hidden my key to access the API.\n",
    "\n",
    "Here is the link to the dashboard where you can find your private key in case you created an account: https://site.financialmodelingprep.com/developer/docs/dashboard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "90683a62",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Because I want to share this file on Github, I made sure that it's not showing the actual key.\n",
    "key = pd.read_csv('/Users/kevinrakotondrasoa/Documents/coding/key.txt', header=None)[0][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec8d9408",
   "metadata": {},
   "source": [
    "FMP provides us the right method to extract data from its API according to the coding language you are using.\n",
    "\n",
    "Here is the function they provided us to extract data with Python."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe616370",
   "metadata": {},
   "source": [
    "## Annual Revenue Geographic Segmentation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53ecc327",
   "metadata": {},
   "source": [
    "### Raw Exploration"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89253f17",
   "metadata": {},
   "source": [
    "Let's have a quick look at what the data looks like in the API calls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "8a049a35",
   "metadata": {},
   "outputs": [],
   "source": [
    "# API call\n",
    "\n",
    "# Building our url according\n",
    "url = 'https://financialmodelingprep.com/api/v4/revenue-geographic-segmentation?symbol=AAPL&structure=flat&apikey='+key\n",
    "\n",
    "\n",
    "# args stands for Annual Revenue Geographic Segmentation\n",
    "args = requests.get(url).json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "70a6ea2e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'2021-09-25': {'Americas Segment': 153306000000, 'Europe Segment': 89307000000, 'Greater China Segment': 68366000000, 'Japan Segment': 28482000000, 'Rest of Asia Pacific Segment': 26356000000}}, {'2020-09-26': {'Americas Segment': 124556000000, 'Europe Segment': 68640000000, 'Greater China Segment': 40308000000, 'Japan Segment': 21418000000, 'Rest of Asia Pacific Segment': 19593000000}}, {'2019-09-28': {'Americas Segment': 116914000000, 'Europe Segment': 60288000000, 'Greater China Segment': 43678000000, 'Japan Segment': 21506000000, 'Rest of Asia Pacific Segment': 17788000000}}, {'2018-09-29': {'Americas Segment': 112093000000, 'Europe Segment': 62420000000, 'Greater China Segment': 51942000000, 'Japan Segment': 21733000000, 'Rest of Asia Pacific Segment': 17407000000}}, {'2017-09-30': {'Americas Segment': 96600000000, 'Europe Segment': 54938000000, 'Greater China Segment': 44764000000, 'Japan Segment': 17733000000, 'Rest of Asia Pacific Segment': 15199000000}}, {'2016-09-24': {'Americas Segment': 86613000000, 'Europe Segment': 49952000000, 'Greater China Segment': 48492000000, 'Japan Segment': 16928000000, 'Rest of Asia Pacific Segment': 13654000000}}, {'2015-09-26': {'CHINA': 56547000000, 'Other Countries': 95436000000, 'UNITED STATES': 81732000000, 'Americas Segment': 93864000000, 'Europe Segment': 50337000000, 'Greater China Segment': 58715000000, 'Japan Segment': 15706000000, 'Rest of Asia Pacific Segment': 15093000000}}, {'2014-09-27': {'CHINA': 30638000000, 'Other Countries': 83248000000, 'UNITED STATES': 68909000000, 'Americas Segment': 65232000000, 'Europe Segment': 40929000000, 'Greater China Segment': 29846000000, 'Japan Segment': 14982000000, 'Rest of Asia Pacific Segment': 10344000000}}, {'2013-09-28': {'C N': 25946000000, 'Other Countries': 78767000000, 'U S': 66197000000, 'Americas': 62739000000, 'Asia Pacific': 11181000000, 'Europe': 37883000000, 'Greater China': 25417000000, 'J P': 13462000000}}, {'2012-09-29': {'C N': 22797000000, 'Other Countries': 72762000000, 'U S': 60949000000, 'Americas': 57512000000, 'Asia Pacific': 33274000000, 'Europe': 36323000000, 'J P': 10571000000}}, {'2011-09-24': {'Americas': 38315000000, 'Asia-Pacific': 22592000000, 'Europe': 27778000000, 'Japan': 5437000000}}]\n"
     ]
    }
   ],
   "source": [
    "# Exploring call\n",
    "print(args)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1087020",
   "metadata": {},
   "source": [
    "Just for like our sales, we have nested dictionaries, with one high level dictionnary with dates and segments, and a lower level with all segments and matching sales.\n",
    "\n",
    "Let's have a look at the lower dictionnary in our call."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "b98c1204",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_values([{'Americas Segment': 153306000000, 'Europe Segment': 89307000000, 'Greater China Segment': 68366000000, 'Japan Segment': 28482000000, 'Rest of Asia Pacific Segment': 26356000000}])"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lower level nested dictionnary\n",
    "args[0].values()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ead03a46",
   "metadata": {},
   "source": [
    "We will reuse the lines of code in the previous Jupyter Notebook."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b515bb57",
   "metadata": {},
   "source": [
    "## Building DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a5c40c7",
   "metadata": {},
   "source": [
    "We want to build a dataframe that has 2 rows and 5 columns (which corresponds to the latest report of geographical revenue."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55863efa",
   "metadata": {},
   "source": [
    "###### Building our list of dataframe\n",
    "\n",
    "We first need to build a list with all the dataframes that we want to have in our main dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "7b47f36a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "                  0               1                      2              3  \\\n",
      "0  Americas Segment  Europe Segment  Greater China Segment  Japan Segment   \n",
      "1      153306000000     89307000000            68366000000    28482000000   \n",
      "\n",
      "                              4  \n",
      "0  Rest of Asia Pacific Segment  \n",
      "1                   26356000000  \n"
     ]
    }
   ],
   "source": [
    "# Running through the different dictionnaries and creating our list of dataframes.\n",
    "# We create an empty list that will contain our list of DataFrame\n",
    "df_list = []\n",
    "\n",
    "# We iterate through the values of our list which are dictionnaries\n",
    "for item in args:\n",
    "    # We iterate through the values of each dictionnary of our list\n",
    "    for values in item.values():\n",
    "        # We only keep the ones with the right shape\n",
    "        if pd.DataFrame.from_dict(values.items()).transpose().shape == (2,5):\n",
    "            # We append the each element to our list at the beginning\n",
    "            # It's important to transpose each dataframe to have as a column the name of each categories of sales\n",
    "            df_list.append(pd.DataFrame.from_dict(values.items()).transpose())\n",
    "\n",
    "# We only keep the element we want for our analysis\n",
    "df_list = df_list[:6]\n",
    "\n",
    "# We should have 6 elements in our list\n",
    "print(len(df_list))\n",
    "\n",
    "# Inspecting the list\n",
    "print(df_list[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b516d820",
   "metadata": {},
   "source": [
    "##### Preparing our dataframe elements: column and index\n",
    "\n",
    "We prepare our column by iterating through our list, and our index by extracting the keys of our initial call."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "e8d4dc81",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Americas Segment', 'Europe Segment', 'Greater China Segment', 'Japan Segment', 'Rest of Asia Pacific Segment']\n"
     ]
    }
   ],
   "source": [
    "# Preparing our columns\n",
    "\n",
    "# Building our empty list\n",
    "columns = []\n",
    "\n",
    "# Going through our list\n",
    "for i in range(0,5):\n",
    "    columns.append(df_list[0][i][0])\n",
    "    \n",
    "print(columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75ea8583",
   "metadata": {},
   "source": [
    "Then we build our index. We will convert it to a datetime index later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "64234beb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['2021-09-25',\n",
       " '2020-09-26',\n",
       " '2019-09-28',\n",
       " '2018-09-29',\n",
       " '2017-09-30',\n",
       " '2016-09-24']"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Preparing our index\n",
    "\n",
    "# Building our empty list\n",
    "index = []\n",
    "\n",
    "# Iteration through all the different element of our list, and the keys of our dictionnaries that are added to our index list\n",
    "for item in args:\n",
    "    for key in item.keys():\n",
    "        index.append(key)\n",
    "\n",
    "# Selecting the first 14 dates\n",
    "index = index[:6]\n",
    "\n",
    "# Inspecting\n",
    "index"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78f38659",
   "metadata": {},
   "source": [
    "##### Stacking our dataframe and editing\n",
    "\n",
    "We are all set and ready. We can now build our dataframe of sales of Apple.\n",
    "\n",
    "We will do that by:\n",
    "- concatenating our list of dataframes,\n",
    "- changing the column names using our list of column,\n",
    "- changing the index using our list of index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "e0cc6d3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Americas Segment</td>\n",
       "      <td>Europe Segment</td>\n",
       "      <td>Greater China Segment</td>\n",
       "      <td>Japan Segment</td>\n",
       "      <td>Rest of Asia Pacific Segment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>153306000000</td>\n",
       "      <td>89307000000</td>\n",
       "      <td>68366000000</td>\n",
       "      <td>28482000000</td>\n",
       "      <td>26356000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Americas Segment</td>\n",
       "      <td>Europe Segment</td>\n",
       "      <td>Greater China Segment</td>\n",
       "      <td>Japan Segment</td>\n",
       "      <td>Rest of Asia Pacific Segment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>124556000000</td>\n",
       "      <td>68640000000</td>\n",
       "      <td>40308000000</td>\n",
       "      <td>21418000000</td>\n",
       "      <td>19593000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Americas Segment</td>\n",
       "      <td>Europe Segment</td>\n",
       "      <td>Greater China Segment</td>\n",
       "      <td>Japan Segment</td>\n",
       "      <td>Rest of Asia Pacific Segment</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  0               1                      2              3  \\\n",
       "0  Americas Segment  Europe Segment  Greater China Segment  Japan Segment   \n",
       "1      153306000000     89307000000            68366000000    28482000000   \n",
       "0  Americas Segment  Europe Segment  Greater China Segment  Japan Segment   \n",
       "1      124556000000     68640000000            40308000000    21418000000   \n",
       "0  Americas Segment  Europe Segment  Greater China Segment  Japan Segment   \n",
       "\n",
       "                              4  \n",
       "0  Rest of Asia Pacific Segment  \n",
       "1                   26356000000  \n",
       "0  Rest of Asia Pacific Segment  \n",
       "1                   19593000000  \n",
       "0  Rest of Asia Pacific Segment  "
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Concatenating our dataframe\n",
    "df2 = pd.concat(df_list)\n",
    "\n",
    "# Inspecting\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "70306ddf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>153306000000</td>\n",
       "      <td>89307000000</td>\n",
       "      <td>68366000000</td>\n",
       "      <td>28482000000</td>\n",
       "      <td>26356000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>124556000000</td>\n",
       "      <td>68640000000</td>\n",
       "      <td>40308000000</td>\n",
       "      <td>21418000000</td>\n",
       "      <td>19593000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>116914000000</td>\n",
       "      <td>60288000000</td>\n",
       "      <td>43678000000</td>\n",
       "      <td>21506000000</td>\n",
       "      <td>17788000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>112093000000</td>\n",
       "      <td>62420000000</td>\n",
       "      <td>51942000000</td>\n",
       "      <td>21733000000</td>\n",
       "      <td>17407000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>96600000000</td>\n",
       "      <td>54938000000</td>\n",
       "      <td>44764000000</td>\n",
       "      <td>17733000000</td>\n",
       "      <td>15199000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>86613000000</td>\n",
       "      <td>49952000000</td>\n",
       "      <td>48492000000</td>\n",
       "      <td>16928000000</td>\n",
       "      <td>13654000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              0            1            2            3            4\n",
       "1  153306000000  89307000000  68366000000  28482000000  26356000000\n",
       "1  124556000000  68640000000  40308000000  21418000000  19593000000\n",
       "1  116914000000  60288000000  43678000000  21506000000  17788000000\n",
       "1  112093000000  62420000000  51942000000  21733000000  17407000000\n",
       "1   96600000000  54938000000  44764000000  17733000000  15199000000\n",
       "1   86613000000  49952000000  48492000000  16928000000  13654000000"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Removing unnecessary lines with filtering\n",
    "df2 = df2[df2.index.values == 1]\n",
    "\n",
    "# Inspecting\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "397a4ff7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We use the reset index method \n",
    "df2.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "837746b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing columns\n",
    "df2.drop(columns=[\"index\"], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "8caf01fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Renaming columns\n",
    "df2.columns = columns\n",
    "\n",
    "# Renaming index\n",
    "df2.index = index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "21766052",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Americas Segment</th>\n",
       "      <th>Europe Segment</th>\n",
       "      <th>Greater China Segment</th>\n",
       "      <th>Japan Segment</th>\n",
       "      <th>Rest of Asia Pacific Segment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-09-25</th>\n",
       "      <td>153306000000</td>\n",
       "      <td>89307000000</td>\n",
       "      <td>68366000000</td>\n",
       "      <td>28482000000</td>\n",
       "      <td>26356000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-26</th>\n",
       "      <td>124556000000</td>\n",
       "      <td>68640000000</td>\n",
       "      <td>40308000000</td>\n",
       "      <td>21418000000</td>\n",
       "      <td>19593000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-09-28</th>\n",
       "      <td>116914000000</td>\n",
       "      <td>60288000000</td>\n",
       "      <td>43678000000</td>\n",
       "      <td>21506000000</td>\n",
       "      <td>17788000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-29</th>\n",
       "      <td>112093000000</td>\n",
       "      <td>62420000000</td>\n",
       "      <td>51942000000</td>\n",
       "      <td>21733000000</td>\n",
       "      <td>17407000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-09-30</th>\n",
       "      <td>96600000000</td>\n",
       "      <td>54938000000</td>\n",
       "      <td>44764000000</td>\n",
       "      <td>17733000000</td>\n",
       "      <td>15199000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-09-24</th>\n",
       "      <td>86613000000</td>\n",
       "      <td>49952000000</td>\n",
       "      <td>48492000000</td>\n",
       "      <td>16928000000</td>\n",
       "      <td>13654000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Americas Segment Europe Segment Greater China Segment  \\\n",
       "2021-09-25     153306000000    89307000000           68366000000   \n",
       "2020-09-26     124556000000    68640000000           40308000000   \n",
       "2019-09-28     116914000000    60288000000           43678000000   \n",
       "2018-09-29     112093000000    62420000000           51942000000   \n",
       "2017-09-30      96600000000    54938000000           44764000000   \n",
       "2016-09-24      86613000000    49952000000           48492000000   \n",
       "\n",
       "           Japan Segment Rest of Asia Pacific Segment  \n",
       "2021-09-25   28482000000                  26356000000  \n",
       "2020-09-26   21418000000                  19593000000  \n",
       "2019-09-28   21506000000                  17788000000  \n",
       "2018-09-29   21733000000                  17407000000  \n",
       "2017-09-30   17733000000                  15199000000  \n",
       "2016-09-24   16928000000                  13654000000  "
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Inspecting\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d60bdcfa",
   "metadata": {},
   "source": [
    "##### Converting to datetime index\n",
    "\n",
    "In finance and economics, most of the data corresponds to timeseries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "bd134132",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 6 entries, 2021-09-25 to 2016-09-24\n",
      "Data columns (total 5 columns):\n",
      " #   Column                        Non-Null Count  Dtype \n",
      "---  ------                        --------------  ----- \n",
      " 0   Americas Segment              6 non-null      object\n",
      " 1   Europe Segment                6 non-null      object\n",
      " 2   Greater China Segment         6 non-null      object\n",
      " 3   Japan Segment                 6 non-null      object\n",
      " 4   Rest of Asia Pacific Segment  6 non-null      object\n",
      "dtypes: object(5)\n",
      "memory usage: 288.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "# Converting our dataframe index to datetime index\n",
    "df2.index = pd.to_datetime(df2.index)\n",
    "\n",
    "# Inspecting\n",
    "df2.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0827cd5e",
   "metadata": {},
   "source": [
    "## Sales Dataviz"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5c1656e",
   "metadata": {},
   "source": [
    "### Comparing revenues\n",
    "\n",
    "Building graphs upon our data can help us understand where do our selected company is doing on different regions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "f6c51ea9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sorting values through index\n",
    "df2.sort_index(ascending=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "6b7c8b9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We are setting up our plots\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "# Looping through all the different columns in our dataframe\n",
    "for i in range(0,5):\n",
    "    ax.plot(df2.index, df2[columns[i]], label=columns[i])\n",
    "    \n",
    "\n",
    "    \n",
    "# Adding labels, legends, and some rotations to our parameters\n",
    "ax.set_xlabel('Quarter')\n",
    "ax.set_ylabel('Sales in $e+10')\n",
    "ax.tick_params(axis='x', rotation=45)\n",
    "ax.legend()\n",
    "\n",
    "# Showing our plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d21c16ca",
   "metadata": {},
   "source": [
    "We can observe that Americas is the one segment moving Apple's sales.\n",
    "\n",
    "And while South East Asia and Japan are neck and neck, Europe has been able to outrace China in the last 3 years when it comes to buying Apple product."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0df59710",
   "metadata": {},
   "source": [
    "### Market shares per region"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c825399",
   "metadata": {},
   "source": [
    "To perform the analysis of market shares, we will build additional columns that provides necessary data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "5954b941",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding a total sales column to our dataframe\n",
    "df2['total sales'] = df2.sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "d6f9e111",
   "metadata": {},
   "outputs": [],
   "source": [
    "# computing our new columns\n",
    "# We the list of our new columns names\n",
    "shares = ['Americas', 'Europe', 'China', 'Japan', 'Asia']\n",
    "\n",
    "# We create a loop to go through our list and build our additional columns\n",
    "for i in range(0,5):\n",
    "    df2[shares[i]] = (df2[columns[i]]/df2['total sales'])*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "d03de4a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Americas Segment</th>\n",
       "      <th>Europe Segment</th>\n",
       "      <th>Greater China Segment</th>\n",
       "      <th>Japan Segment</th>\n",
       "      <th>Rest of Asia Pacific Segment</th>\n",
       "      <th>total sales</th>\n",
       "      <th>Americas</th>\n",
       "      <th>Europe</th>\n",
       "      <th>China</th>\n",
       "      <th>Japan</th>\n",
       "      <th>Asia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-09-24</th>\n",
       "      <td>86613000000</td>\n",
       "      <td>49952000000</td>\n",
       "      <td>48492000000</td>\n",
       "      <td>16928000000</td>\n",
       "      <td>13654000000</td>\n",
       "      <td>2.156390e+11</td>\n",
       "      <td>40.16574</td>\n",
       "      <td>23.164641</td>\n",
       "      <td>22.487583</td>\n",
       "      <td>7.850157</td>\n",
       "      <td>6.331879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-09-30</th>\n",
       "      <td>96600000000</td>\n",
       "      <td>54938000000</td>\n",
       "      <td>44764000000</td>\n",
       "      <td>17733000000</td>\n",
       "      <td>15199000000</td>\n",
       "      <td>2.292340e+11</td>\n",
       "      <td>42.140346</td>\n",
       "      <td>23.965904</td>\n",
       "      <td>19.527644</td>\n",
       "      <td>7.735763</td>\n",
       "      <td>6.630343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-29</th>\n",
       "      <td>112093000000</td>\n",
       "      <td>62420000000</td>\n",
       "      <td>51942000000</td>\n",
       "      <td>21733000000</td>\n",
       "      <td>17407000000</td>\n",
       "      <td>2.655950e+11</td>\n",
       "      <td>42.204484</td>\n",
       "      <td>23.501948</td>\n",
       "      <td>19.556844</td>\n",
       "      <td>8.182759</td>\n",
       "      <td>6.553964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-09-28</th>\n",
       "      <td>116914000000</td>\n",
       "      <td>60288000000</td>\n",
       "      <td>43678000000</td>\n",
       "      <td>21506000000</td>\n",
       "      <td>17788000000</td>\n",
       "      <td>2.601740e+11</td>\n",
       "      <td>44.93685</td>\n",
       "      <td>23.172185</td>\n",
       "      <td>16.787996</td>\n",
       "      <td>8.266007</td>\n",
       "      <td>6.836963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-26</th>\n",
       "      <td>124556000000</td>\n",
       "      <td>68640000000</td>\n",
       "      <td>40308000000</td>\n",
       "      <td>21418000000</td>\n",
       "      <td>19593000000</td>\n",
       "      <td>2.745150e+11</td>\n",
       "      <td>45.373113</td>\n",
       "      <td>25.004098</td>\n",
       "      <td>14.683351</td>\n",
       "      <td>7.802124</td>\n",
       "      <td>7.137315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-25</th>\n",
       "      <td>153306000000</td>\n",
       "      <td>89307000000</td>\n",
       "      <td>68366000000</td>\n",
       "      <td>28482000000</td>\n",
       "      <td>26356000000</td>\n",
       "      <td>3.658170e+11</td>\n",
       "      <td>41.907839</td>\n",
       "      <td>24.413026</td>\n",
       "      <td>18.688579</td>\n",
       "      <td>7.78586</td>\n",
       "      <td>7.204695</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Americas Segment Europe Segment Greater China Segment  \\\n",
       "2016-09-24      86613000000    49952000000           48492000000   \n",
       "2017-09-30      96600000000    54938000000           44764000000   \n",
       "2018-09-29     112093000000    62420000000           51942000000   \n",
       "2019-09-28     116914000000    60288000000           43678000000   \n",
       "2020-09-26     124556000000    68640000000           40308000000   \n",
       "2021-09-25     153306000000    89307000000           68366000000   \n",
       "\n",
       "           Japan Segment Rest of Asia Pacific Segment   total sales  \\\n",
       "2016-09-24   16928000000                  13654000000  2.156390e+11   \n",
       "2017-09-30   17733000000                  15199000000  2.292340e+11   \n",
       "2018-09-29   21733000000                  17407000000  2.655950e+11   \n",
       "2019-09-28   21506000000                  17788000000  2.601740e+11   \n",
       "2020-09-26   21418000000                  19593000000  2.745150e+11   \n",
       "2021-09-25   28482000000                  26356000000  3.658170e+11   \n",
       "\n",
       "             Americas     Europe      China     Japan      Asia  \n",
       "2016-09-24   40.16574  23.164641  22.487583  7.850157  6.331879  \n",
       "2017-09-30  42.140346  23.965904  19.527644  7.735763  6.630343  \n",
       "2018-09-29  42.204484  23.501948  19.556844  8.182759  6.553964  \n",
       "2019-09-28   44.93685  23.172185  16.787996  8.266007  6.836963  \n",
       "2020-09-26  45.373113  25.004098  14.683351  7.802124  7.137315  \n",
       "2021-09-25  41.907839  24.413026  18.688579   7.78586  7.204695  "
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Inspecting our new dataframe\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "1d48ff3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Americas</th>\n",
       "      <th>Europe</th>\n",
       "      <th>China</th>\n",
       "      <th>Japan</th>\n",
       "      <th>Asia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-09-24</th>\n",
       "      <td>40.16574</td>\n",
       "      <td>23.164641</td>\n",
       "      <td>22.487583</td>\n",
       "      <td>7.850157</td>\n",
       "      <td>6.331879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-09-30</th>\n",
       "      <td>42.140346</td>\n",
       "      <td>23.965904</td>\n",
       "      <td>19.527644</td>\n",
       "      <td>7.735763</td>\n",
       "      <td>6.630343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-29</th>\n",
       "      <td>42.204484</td>\n",
       "      <td>23.501948</td>\n",
       "      <td>19.556844</td>\n",
       "      <td>8.182759</td>\n",
       "      <td>6.553964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-09-28</th>\n",
       "      <td>44.93685</td>\n",
       "      <td>23.172185</td>\n",
       "      <td>16.787996</td>\n",
       "      <td>8.266007</td>\n",
       "      <td>6.836963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-26</th>\n",
       "      <td>45.373113</td>\n",
       "      <td>25.004098</td>\n",
       "      <td>14.683351</td>\n",
       "      <td>7.802124</td>\n",
       "      <td>7.137315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-25</th>\n",
       "      <td>41.907839</td>\n",
       "      <td>24.413026</td>\n",
       "      <td>18.688579</td>\n",
       "      <td>7.78586</td>\n",
       "      <td>7.204695</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Americas     Europe      China     Japan      Asia\n",
       "2016-09-24   40.16574  23.164641  22.487583  7.850157  6.331879\n",
       "2017-09-30  42.140346  23.965904  19.527644  7.735763  6.630343\n",
       "2018-09-29  42.204484  23.501948  19.556844  8.182759  6.553964\n",
       "2019-09-28   44.93685  23.172185  16.787996  8.266007  6.836963\n",
       "2020-09-26  45.373113  25.004098  14.683351  7.802124  7.137315\n",
       "2021-09-25  41.907839  24.413026  18.688579   7.78586  7.204695"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using iloc to select all rows, and the last 5 columns of our df2 dataframe\n",
    "df_result = df2.iloc[:,5:]\n",
    "\n",
    "# Building our DataFrame\n",
    "df5 = df_result.loc[:, 'Americas':]\n",
    "\n",
    "# Inspecting\n",
    "df5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "c1dbc586",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Americas</th>\n",
       "      <th>Europe</th>\n",
       "      <th>China</th>\n",
       "      <th>Japan</th>\n",
       "      <th>Asia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016</th>\n",
       "      <td>40.16574</td>\n",
       "      <td>23.164641</td>\n",
       "      <td>22.487583</td>\n",
       "      <td>7.850157</td>\n",
       "      <td>6.331879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017</th>\n",
       "      <td>42.140346</td>\n",
       "      <td>23.965904</td>\n",
       "      <td>19.527644</td>\n",
       "      <td>7.735763</td>\n",
       "      <td>6.630343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018</th>\n",
       "      <td>42.204484</td>\n",
       "      <td>23.501948</td>\n",
       "      <td>19.556844</td>\n",
       "      <td>8.182759</td>\n",
       "      <td>6.553964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019</th>\n",
       "      <td>44.93685</td>\n",
       "      <td>23.172185</td>\n",
       "      <td>16.787996</td>\n",
       "      <td>8.266007</td>\n",
       "      <td>6.836963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020</th>\n",
       "      <td>45.373113</td>\n",
       "      <td>25.004098</td>\n",
       "      <td>14.683351</td>\n",
       "      <td>7.802124</td>\n",
       "      <td>7.137315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021</th>\n",
       "      <td>41.907839</td>\n",
       "      <td>24.413026</td>\n",
       "      <td>18.688579</td>\n",
       "      <td>7.78586</td>\n",
       "      <td>7.204695</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Americas     Europe      China     Japan      Asia\n",
       "2016   40.16574  23.164641  22.487583  7.850157  6.331879\n",
       "2017  42.140346  23.965904  19.527644  7.735763  6.630343\n",
       "2018  42.204484  23.501948  19.556844  8.182759  6.553964\n",
       "2019   44.93685  23.172185  16.787996  8.266007  6.836963\n",
       "2020  45.373113  25.004098  14.683351  7.802124  7.137315\n",
       "2021  41.907839  24.413026  18.688579   7.78586  7.204695"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We use years as index\n",
    "df5.index = ['2016', '2017', '2018', '2019', '2020', '2021']\n",
    "\n",
    "# Inspecting\n",
    "df5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "909eacd7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/sn/wq_2w76s333b7xmhtx39fzs80000gn/T/ipykernel_83770/3709552380.py:12: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_xticklabels(df5.index, rotation=45)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Setting up all our subplots\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "# Editing each bars\n",
    "ax.bar(df5.index, df5[shares[0]], label= shares[0])\n",
    "ax.bar(df5.index, df5[shares[1]], label = shares[1], bottom = df5[shares[0]])\n",
    "ax.bar(df5.index, df5[shares[2]], label = shares[2], bottom = df5[shares[1]] + df5[shares[0]])\n",
    "ax.bar(df5.index, df5[shares[3]], label = shares[3], bottom = df5[shares[2]] + df5[shares[1]] + df5[shares[0]])\n",
    "ax.bar(df5.index, df5[shares[4]], label = shares[4], bottom = df5[shares[3]] + df5[shares[2]] + df5[shares[1]] + df5[shares[0]]) \n",
    "       \n",
    "ax.set_xticklabels(df5.index, rotation=45)\n",
    "ax.set_ylabel(\"Sales shares in %\")\n",
    "ax.legend()\n",
    "\n",
    "# Showing graphs\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f88fd9e",
   "metadata": {},
   "source": [
    "As we can observe, Europe and Mercans represents up to 70% of overall market of Apple."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "072d998d",
   "metadata": {},
   "source": [
    "## Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b40ecf41",
   "metadata": {},
   "source": [
    "Though this is a very small piece of data that the Financial Modelling Prep is offering, it can bring some strategy insight about a studied company to understand if stocks is over or undervalued.\n",
    "\n",
    "Furthermore, this data can easily be explored through BI tools such as Data Studio or PowerBi."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c2d78f5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
