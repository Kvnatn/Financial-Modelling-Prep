{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cbd3e890",
   "metadata": {},
   "source": [
    "# FMP Stock Fundamentals Exploration : Sales"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "024da74f",
   "metadata": {},
   "source": [
    "Welcome to this Jupyter Notebook of the Finsloth.\n",
    "\n",
    "In this third Notebook of our series, we are going to explore one key element of FMP Stock Fundamentals which is sales.\n",
    "\n",
    "Our goal is to understand **the meaning and the structure of each data given by FMP, how to transform it for actual use in any trading or investing strategies**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e32450ff",
   "metadata": {},
   "source": [
    "## About Financial Modeling Prep\n",
    "\n",
    "Financial Modeling Prep is a stock market API that provides a wide range of data. Data covers stocks, crypto forex and commodities.\n",
    "\n",
    "You have addition data such as institutional stock ownership, esg score, price target, etc.\n",
    "\n",
    "There are several plans including a free one.\n",
    "\n",
    "I am on a start plan for this notebook. Here are the link for the pricing: https://site.financialmodelingprep.com/developer/docs/pricing/"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef6eab17",
   "metadata": {},
   "source": [
    "## What is sales?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f66e063",
   "metadata": {},
   "source": [
    "Revenue is the money generated from normal business operations, calculated as the average sales price times the number of units sold. It is the top line (or gross income) figure from which costs are subtracted to determine net income. Revenue is also known as sales on the income statement.\n",
    "\n",
    "Sales plays a key role in analysing the health of a company.\n",
    "\n",
    "source: https://www.investopedia.com/terms/r/revenue.asp#toc-what-is-revenue"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dc58fea",
   "metadata": {},
   "source": [
    "## Diving into Revenue"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac75c0c3",
   "metadata": {},
   "source": [
    "In this notebook, we are going to dive into what's available for revenue analysis in Financial Model Prep, and how see how we can manipulate the data.\n",
    "\n",
    "For this notebook, we'll use a data vizualisation, as sales is interesting when it comes to have a graphical view of it."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a03ab21",
   "metadata": {},
   "source": [
    "### Setting up our Notebook "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "f01fad4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We import our librairies\n",
    "\n",
    "# Data manipulation librairies\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# API linked libraries for clean extraction\n",
    "import requests\n",
    "import json\n",
    "\n",
    "# Datavizualisation librairies for graphs\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e354bce0",
   "metadata": {},
   "source": [
    "For privacy reason, I have hidden my key to access the API.\n",
    "\n",
    "Here is the link to the dashboard where you can find your private key in case you created an account: https://site.financialmodelingprep.com/developer/docs/dashboard"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "b9a47b65",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Because I want to share this file on Github, I made sure that it's not showing the actual key.\n",
    "key=pd.read_csv('/Users/kevinrakotondrasoa/Documents/coding/key.txt', header=None)[0][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abca3ba0",
   "metadata": {},
   "source": [
    "### Raw Exploration"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e99ee9da",
   "metadata": {},
   "source": [
    "We'll do a raw exploration of the API before diving into how to structure the link for sales.\n",
    "\n",
    "We choose to use the quarterly sales for our first exploration to have more data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "40e6512b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We do our API call from FMP\n",
    "\n",
    "# Our url\n",
    "url='https://financialmodelingprep.com/api/v4/revenue-product-segmentation?symbol=AAPL&period=quarter&structure=flat&apikey='+key\n",
    "\n",
    "# We do our call using request and json on our API\n",
    "# qsr stands for quarterly sales report\n",
    "\n",
    "qsr = requests.get(url).json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "175b9c4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'2022-06-25': {'Mac': 7382000000, 'Service': 19604000000, 'Wearables, Home and Accessories': 8084000000, 'iPad': 7224000000, 'iPhone': 40665000000}}, {'2022-03-26': {'Mac': 10435000000, 'Service': 19821000000, 'Wearables, Home and Accessories': 8806000000, 'iPad': 7646000000, 'iPhone': 50570000000}}, {'2021-12-25': {'Mac': 10852000000, 'Service': 19516000000, 'Wearables, Home and Accessories': 14701000000, 'iPad': 7248000000, 'iPhone': 71628000000}}, {'2021-09-25': {'Mac': 9178000000.0, 'Service': 18277000000.0, 'Wearables, Home and Accessories': 8785000000.0, 'iPad': 8252000000.0, 'iPhone': 38868000000.0}}, {'2021-06-26': {'Mac': 8235000000, 'Service': 17486000000, 'Wearables, Home and Accessories': 8775000000, 'iPad': 7368000000, 'iPhone': 39570000000}}, {'2021-03-27': {'Mac': 9102000000, 'Service': 16901000000, 'Wearables, Home and Accessories': 7836000000, 'iPad': 7807000000, 'iPhone': 47938000000}}, {'2020-12-26': {'Mac': 8675000000, 'Service': 15761000000, 'Wearables, Home and Accessories': 12971000000, 'iPad': 8435000000, 'iPhone': 65597000000}}, {'2020-09-26': {'Mac': 9032000000.0, 'Service': 14549000000.0, 'Wearables, Home and Accessories': 7876000000.0, 'iPad': 6797000000.0, 'iPhone': 26444000000.0}}, {'2020-06-27': {'Mac': 7079000000, 'Service': 13156000000, 'Wearables, Home and Accessories': 6450000000, 'iPad': 6582000000, 'iPhone': 26418000000}}, {'2020-03-28': {'Mac': 5351000000, 'Service': 13348000000, 'Wearables, Home and Accessories': 6284000000, 'iPad': 4368000000, 'iPhone': 28962000000}}, {'2019-12-28': {'Mac': 7160000000, 'Service': 12715000000, 'Wearables, Home and Accessories': 10010000000, 'iPad': 5977000000, 'iPhone': 55957000000}}, {'2019-09-28': {'Mac': 6991000000.0, 'Service': 12511000000.0, 'Wearables, Home and Accessories': 6520000000.0, 'iPad': 4656000000.0, 'iPhone': 33362000000.0}}, {'2019-06-29': {'Mac': 5820000000, 'Service': 11455000000, 'Wearables, Home and Accessories': 5525000000, 'iPad': 5023000000, 'iPhone': 25986000000}}, {'2019-03-30': {'Mac': 5513000000, 'Service': 11450000000, 'Wearables, Home and Accessories': 5129000000, 'iPad': 4872000000, 'iPhone': 31051000000}}, {'2018-12-29': {'Mac': 7416000000, 'Service': 10875000000, 'Wearables, Home and Accessories': 7308000000, 'iPad': 6729000000, 'iPhone': 51982000000}}, {'2014-06-28': {'Retail': 4104000000}}, {'2014-03-29': {'J P': 3963000000, 'Retail': 5227000000}}, {'2013-12-28': {'J P': 4948000000, 'Retail': 6998000000}}, {'2013-09-28': {'J P': 3341000000.0, 'Retail': 4472000000.0}}, {'2013-06-29': {'J P': 2543000000, 'Retail': 4074000000}}, {'2013-03-30': {'J P': 3135000000, 'Retail': 5241000000}}, {'2012-12-29': {'J P': 4443000000, 'Retail': 6441000000}}, {'2012-09-29': {'J P': 2367000000.0, 'Retail': 4229000000.0}}, {'2012-06-30': {'J P': 2009000000, 'Retail': 4084000000}}, {'2012-03-31': {'J P': 2645000000, 'Retail': 4399000000}}, {'2011-12-31': {'J P': 3550000000, 'Retail': 6116000000}}, {'2011-09-24': {'Apple Mac': 0.0, 'Apple TV': 0.0, 'Apple iPad': 16, 'Apple iPhone': 16, 'Apple iPod touch': 11, 'Retail': 3584000000.0}}, {'2011-06-25': {'Apple Mac': 22, 'Apple TV': 5, 'Apple iPad': 16, 'Apple iPhone': 16, 'Apple iPod touch': 11, 'Retail': 3505000000}}, {'2011-03-26': {'Retail': 3191000000}}, {'2010-12-25': {'Retail': 3847000000}}]\n",
      "{'2022-06-25': {'Mac': 7382000000, 'Service': 19604000000, 'Wearables, Home and Accessories': 8084000000, 'iPad': 7224000000, 'iPhone': 40665000000}}\n"
     ]
    }
   ],
   "source": [
    "print(qsr)\n",
    "print(qsr[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c920819",
   "metadata": {},
   "source": [
    "According to our call on the API, we can clearly see that sales have been divided according to Apple's business lines which include:\n",
    "- **Mac**: refers to all Mac products that include macbook, mac pro, etc.\n",
    "- **Wearables, Home and Accessories**: all product including headphones, chargers, homepods, etc.\n",
    "- **iPad**: all iPads (pro, air, mini)\n",
    "- **iPhone**: all iPhones (current collections)\n",
    "- **Services**: apple tv+, icloud and other services.\n",
    "\n",
    "\"Product\" corresponds to all product except services.\n",
    "\n",
    "Let's quickly do a calculation to verify what we are saying and check if the sum of Mac, Wearables, Ipad and Iphone is equal to Product."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "9e58d456",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7382000000 8084000000 7224000000 40665000000 19604000000\n"
     ]
    }
   ],
   "source": [
    "# Creating a call for last quarter of 22\n",
    "q3 = qsr[0]['2022-06-25']\n",
    "\n",
    "# Calling all elements in the last quarter of 22\n",
    "mac = q3['Mac']\n",
    "wearables = q3['Wearables, Home and Accessories']\n",
    "ipad = q3['iPad']\n",
    "iphone = q3['iPhone']\n",
    "service = q3['Service']\n",
    "\n",
    "print(mac, wearables, ipad, iphone, service)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e5d1dde",
   "metadata": {},
   "source": [
    "We can see that the data provided by financial modelling prep follows the same logic of the reports provided by Apple."
   ]
  },
  {
   "attachments": {
    "Screenshot%202022-09-06%20at%2015.49.04.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "e74be8a4",
   "metadata": {},
   "source": [
    "![Screenshot%202022-09-06%20at%2015.49.04.png](attachment:Screenshot%202022-09-06%20at%2015.49.04.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de826111",
   "metadata": {},
   "source": [
    "### Data Manipulation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "466f9db6",
   "metadata": {},
   "source": [
    "#### Transforming into a dataframe\n",
    "\n",
    "As usual, we will transform our extract into a more understandable and manipulable structure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "c061451b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>2022-06-25</th>\n",
       "      <th>2022-03-26</th>\n",
       "      <th>2021-12-25</th>\n",
       "      <th>2021-09-25</th>\n",
       "      <th>2021-06-26</th>\n",
       "      <th>2021-03-27</th>\n",
       "      <th>2020-12-26</th>\n",
       "      <th>2020-09-26</th>\n",
       "      <th>2020-06-27</th>\n",
       "      <th>2020-03-28</th>\n",
       "      <th>...</th>\n",
       "      <th>2013-03-30</th>\n",
       "      <th>2012-12-29</th>\n",
       "      <th>2012-09-29</th>\n",
       "      <th>2012-06-30</th>\n",
       "      <th>2012-03-31</th>\n",
       "      <th>2011-12-31</th>\n",
       "      <th>2011-09-24</th>\n",
       "      <th>2011-06-25</th>\n",
       "      <th>2011-03-26</th>\n",
       "      <th>2010-12-25</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>{'Mac': 7382000000, 'Service': 19604000000, 'W...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>{'Mac': 10435000000, 'Service': 19821000000, '...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'Mac': 10852000000, 'Service': 19516000000, '...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'Mac': 9178000000.0, 'Service': 18277000000.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'Mac': 8235000000, 'Service': 17486000000, 'W...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          2022-06-25  \\\n",
       "0  {'Mac': 7382000000, 'Service': 19604000000, 'W...   \n",
       "1                                                NaN   \n",
       "2                                                NaN   \n",
       "3                                                NaN   \n",
       "4                                                NaN   \n",
       "\n",
       "                                          2022-03-26  \\\n",
       "0                                                NaN   \n",
       "1  {'Mac': 10435000000, 'Service': 19821000000, '...   \n",
       "2                                                NaN   \n",
       "3                                                NaN   \n",
       "4                                                NaN   \n",
       "\n",
       "                                          2021-12-25  \\\n",
       "0                                                NaN   \n",
       "1                                                NaN   \n",
       "2  {'Mac': 10852000000, 'Service': 19516000000, '...   \n",
       "3                                                NaN   \n",
       "4                                                NaN   \n",
       "\n",
       "                                          2021-09-25  \\\n",
       "0                                                NaN   \n",
       "1                                                NaN   \n",
       "2                                                NaN   \n",
       "3  {'Mac': 9178000000.0, 'Service': 18277000000.0...   \n",
       "4                                                NaN   \n",
       "\n",
       "                                          2021-06-26 2021-03-27 2020-12-26  \\\n",
       "0                                                NaN        NaN        NaN   \n",
       "1                                                NaN        NaN        NaN   \n",
       "2                                                NaN        NaN        NaN   \n",
       "3                                                NaN        NaN        NaN   \n",
       "4  {'Mac': 8235000000, 'Service': 17486000000, 'W...        NaN        NaN   \n",
       "\n",
       "  2020-09-26 2020-06-27 2020-03-28  ... 2013-03-30 2012-12-29 2012-09-29  \\\n",
       "0        NaN        NaN        NaN  ...        NaN        NaN        NaN   \n",
       "1        NaN        NaN        NaN  ...        NaN        NaN        NaN   \n",
       "2        NaN        NaN        NaN  ...        NaN        NaN        NaN   \n",
       "3        NaN        NaN        NaN  ...        NaN        NaN        NaN   \n",
       "4        NaN        NaN        NaN  ...        NaN        NaN        NaN   \n",
       "\n",
       "  2012-06-30 2012-03-31 2011-12-31 2011-09-24 2011-06-25 2011-03-26 2010-12-25  \n",
       "0        NaN        NaN        NaN        NaN        NaN        NaN        NaN  \n",
       "1        NaN        NaN        NaN        NaN        NaN        NaN        NaN  \n",
       "2        NaN        NaN        NaN        NaN        NaN        NaN        NaN  \n",
       "3        NaN        NaN        NaN        NaN        NaN        NaN        NaN  \n",
       "4        NaN        NaN        NaN        NaN        NaN        NaN        NaN  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calling Pandas DataFrame\n",
    "qsr = pd.DataFrame(qsr)\n",
    "\n",
    "# Inspecting the head of our dataframe\n",
    "qsr.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5272a5cc",
   "metadata": {},
   "source": [
    "As we can see here, it's not as easy as usual. We can clearly see that for each quarter, all the information have been put in a single cell of our dataframe.\n",
    "\n",
    "Let's see how could explore the data by first calling our first column, first row information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "172f7b51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Mac': 7382000000,\n",
       " 'Service': 19604000000,\n",
       " 'Wearables, Home and Accessories': 8084000000,\n",
       " 'iPad': 7224000000,\n",
       " 'iPhone': 40665000000}"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We use iloc method to exctract info.\n",
    "qsr.iloc[0,0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88e3094a",
   "metadata": {},
   "source": [
    "As we can see, we were able to extract the information. Now let's check if we can transform this dictionnary into a Data Frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "ba3604ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mac</th>\n",
       "      <th>Service</th>\n",
       "      <th>Wearables, Home and Accessories</th>\n",
       "      <th>iPad</th>\n",
       "      <th>iPhone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7382000000</td>\n",
       "      <td>19604000000</td>\n",
       "      <td>8084000000</td>\n",
       "      <td>7224000000</td>\n",
       "      <td>40665000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Mac      Service  Wearables, Home and Accessories        iPad  \\\n",
       "1  7382000000  19604000000                       8084000000  7224000000   \n",
       "\n",
       "        iPhone  \n",
       "1  40665000000  "
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# we transform our previous call\n",
    "s3y22 = qsr.iloc[0,0]\n",
    "\n",
    "# we put this into a DataFrame\n",
    "s3y22 = pd.DataFrame(s3y22, index=[1])\n",
    "\n",
    "# Let' inspect our dataframe\n",
    "s3y22"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7b17def",
   "metadata": {},
   "source": [
    "As seen here, it's possible to extract every single row and transform it into a dataframe. We will now transform our JSON into a useable DataFrame"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a460a5d",
   "metadata": {},
   "source": [
    "### Building Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cffb4dc5",
   "metadata": {},
   "source": [
    "Let's proceed to run through our dictionnary and transform it into a more friendly useable format.\n",
    "\n",
    "We want to have a dataframe that can be transposed with:\n",
    "- on one of the index, the different categories,\n",
    "- on the other index, the quarter to which each category correspondes.\n",
    "\n",
    "As seen earlier in our extract, we have:\n",
    "- a list of dictionnary,\n",
    "- each dictionnary contains a signe key which is the quarter date,\n",
    "- each value to each key is a dictionnary containing all the data.\n",
    "\n",
    "We need to iterate through every single item at each level to build our dataframe."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a5a8459",
   "metadata": {},
   "source": [
    "#### Recalling our JSON\n",
    "\n",
    "Let's re-explore our JSON"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "ab3167e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Recalling our url\n",
    "qsr = requests.get(url).json()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "5275f16c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'2022-06-25': {'Mac': 7382000000,\n",
       "   'Service': 19604000000,\n",
       "   'Wearables, Home and Accessories': 8084000000,\n",
       "   'iPad': 7224000000,\n",
       "   'iPhone': 40665000000}},\n",
       " {'2022-03-26': {'Mac': 10435000000,\n",
       "   'Service': 19821000000,\n",
       "   'Wearables, Home and Accessories': 8806000000,\n",
       "   'iPad': 7646000000,\n",
       "   'iPhone': 50570000000}},\n",
       " {'2021-12-25': {'Mac': 10852000000,\n",
       "   'Service': 19516000000,\n",
       "   'Wearables, Home and Accessories': 14701000000,\n",
       "   'iPad': 7248000000,\n",
       "   'iPhone': 71628000000}},\n",
       " {'2021-09-25': {'Mac': 9178000000.0,\n",
       "   'Service': 18277000000.0,\n",
       "   'Wearables, Home and Accessories': 8785000000.0,\n",
       "   'iPad': 8252000000.0,\n",
       "   'iPhone': 38868000000.0}},\n",
       " {'2021-06-26': {'Mac': 8235000000,\n",
       "   'Service': 17486000000,\n",
       "   'Wearables, Home and Accessories': 8775000000,\n",
       "   'iPad': 7368000000,\n",
       "   'iPhone': 39570000000}}]"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Re-inspecting the structure of our call\n",
    "qsr[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ba8910c",
   "metadata": {},
   "source": [
    "#### Iterating through the several levels of our API"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "260bfbea",
   "metadata": {},
   "source": [
    "We are going to go step by step in the exploration of our API call:\n",
    "- first through the **elements of our JSON list** which corresponds to all **dictionary**,\n",
    "- then through the **keys of the first level dictionnary** which corresponds to **dates€€,\n",
    "- then through **keys and values of the deeper (2nd level) dictionnary** which corresponds to **sales categories and their respective amount** for the given quarter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "c644feb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'2022-06-25': {'Mac': 7382000000, 'Service': 19604000000, 'Wearables, Home and Accessories': 8084000000, 'iPad': 7224000000, 'iPhone': 40665000000}}\n",
      "{'2022-03-26': {'Mac': 10435000000, 'Service': 19821000000, 'Wearables, Home and Accessories': 8806000000, 'iPad': 7646000000, 'iPhone': 50570000000}}\n",
      "{'2021-12-25': {'Mac': 10852000000, 'Service': 19516000000, 'Wearables, Home and Accessories': 14701000000, 'iPad': 7248000000, 'iPhone': 71628000000}}\n",
      "{'2021-09-25': {'Mac': 9178000000.0, 'Service': 18277000000.0, 'Wearables, Home and Accessories': 8785000000.0, 'iPad': 8252000000.0, 'iPhone': 38868000000.0}}\n",
      "{'2021-06-26': {'Mac': 8235000000, 'Service': 17486000000, 'Wearables, Home and Accessories': 8775000000, 'iPad': 7368000000, 'iPhone': 39570000000}}\n",
      "{'2021-03-27': {'Mac': 9102000000, 'Service': 16901000000, 'Wearables, Home and Accessories': 7836000000, 'iPad': 7807000000, 'iPhone': 47938000000}}\n",
      "{'2020-12-26': {'Mac': 8675000000, 'Service': 15761000000, 'Wearables, Home and Accessories': 12971000000, 'iPad': 8435000000, 'iPhone': 65597000000}}\n",
      "{'2020-09-26': {'Mac': 9032000000.0, 'Service': 14549000000.0, 'Wearables, Home and Accessories': 7876000000.0, 'iPad': 6797000000.0, 'iPhone': 26444000000.0}}\n",
      "{'2020-06-27': {'Mac': 7079000000, 'Service': 13156000000, 'Wearables, Home and Accessories': 6450000000, 'iPad': 6582000000, 'iPhone': 26418000000}}\n",
      "{'2020-03-28': {'Mac': 5351000000, 'Service': 13348000000, 'Wearables, Home and Accessories': 6284000000, 'iPad': 4368000000, 'iPhone': 28962000000}}\n",
      "{'2019-12-28': {'Mac': 7160000000, 'Service': 12715000000, 'Wearables, Home and Accessories': 10010000000, 'iPad': 5977000000, 'iPhone': 55957000000}}\n",
      "{'2019-09-28': {'Mac': 6991000000.0, 'Service': 12511000000.0, 'Wearables, Home and Accessories': 6520000000.0, 'iPad': 4656000000.0, 'iPhone': 33362000000.0}}\n",
      "{'2019-06-29': {'Mac': 5820000000, 'Service': 11455000000, 'Wearables, Home and Accessories': 5525000000, 'iPad': 5023000000, 'iPhone': 25986000000}}\n",
      "{'2019-03-30': {'Mac': 5513000000, 'Service': 11450000000, 'Wearables, Home and Accessories': 5129000000, 'iPad': 4872000000, 'iPhone': 31051000000}}\n",
      "{'2018-12-29': {'Mac': 7416000000, 'Service': 10875000000, 'Wearables, Home and Accessories': 7308000000, 'iPad': 6729000000, 'iPhone': 51982000000}}\n",
      "{'2014-06-28': {'Retail': 4104000000}}\n",
      "{'2014-03-29': {'J P': 3963000000, 'Retail': 5227000000}}\n",
      "{'2013-12-28': {'J P': 4948000000, 'Retail': 6998000000}}\n",
      "{'2013-09-28': {'J P': 3341000000.0, 'Retail': 4472000000.0}}\n",
      "{'2013-06-29': {'J P': 2543000000, 'Retail': 4074000000}}\n",
      "{'2013-03-30': {'J P': 3135000000, 'Retail': 5241000000}}\n",
      "{'2012-12-29': {'J P': 4443000000, 'Retail': 6441000000}}\n",
      "{'2012-09-29': {'J P': 2367000000.0, 'Retail': 4229000000.0}}\n",
      "{'2012-06-30': {'J P': 2009000000, 'Retail': 4084000000}}\n",
      "{'2012-03-31': {'J P': 2645000000, 'Retail': 4399000000}}\n",
      "{'2011-12-31': {'J P': 3550000000, 'Retail': 6116000000}}\n",
      "{'2011-09-24': {'Apple Mac': 0.0, 'Apple TV': 0.0, 'Apple iPad': 16, 'Apple iPhone': 16, 'Apple iPod touch': 11, 'Retail': 3584000000.0}}\n",
      "{'2011-06-25': {'Apple Mac': 22, 'Apple TV': 5, 'Apple iPad': 16, 'Apple iPhone': 16, 'Apple iPod touch': 11, 'Retail': 3505000000}}\n",
      "{'2011-03-26': {'Retail': 3191000000}}\n",
      "{'2010-12-25': {'Retail': 3847000000}}\n"
     ]
    }
   ],
   "source": [
    "# We iterate in the first level, which is a list of dictionnary\n",
    "for item in qsr:\n",
    "    print(item)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77a07029",
   "metadata": {},
   "source": [
    "We can see that we have a different structure at the end of our JSON. Before the last quarter of sales of 2018, information have been missing.\n",
    "\n",
    "Taking that into account, we need to do our call on available and structure data only."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "2fc16b89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2022-06-25\n",
      "2022-03-26\n",
      "2021-12-25\n",
      "2021-09-25\n",
      "2021-06-26\n",
      "2021-03-27\n",
      "2020-12-26\n",
      "2020-09-26\n",
      "2020-06-27\n",
      "2020-03-28\n",
      "2019-12-28\n",
      "2019-09-28\n",
      "2019-06-29\n",
      "2019-03-30\n",
      "2018-12-29\n",
      "2014-06-28\n",
      "2014-03-29\n",
      "2013-12-28\n",
      "2013-09-28\n",
      "2013-06-29\n",
      "2013-03-30\n",
      "2012-12-29\n",
      "2012-09-29\n",
      "2012-06-30\n",
      "2012-03-31\n",
      "2011-12-31\n",
      "2011-09-24\n",
      "2011-06-25\n",
      "2011-03-26\n",
      "2010-12-25\n"
     ]
    }
   ],
   "source": [
    "# We then iterate through all the keys of each element.\n",
    "for item in qsr:\n",
    "    for key in item.keys():\n",
    "        print(key)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f606fe01",
   "metadata": {},
   "source": [
    "Keys provide the different dates at which quarter report has been out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "5a97b932",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Mac': 7382000000, 'Service': 19604000000, 'Wearables, Home and Accessories': 8084000000, 'iPad': 7224000000, 'iPhone': 40665000000}\n",
      "{'Mac': 10435000000, 'Service': 19821000000, 'Wearables, Home and Accessories': 8806000000, 'iPad': 7646000000, 'iPhone': 50570000000}\n",
      "{'Mac': 10852000000, 'Service': 19516000000, 'Wearables, Home and Accessories': 14701000000, 'iPad': 7248000000, 'iPhone': 71628000000}\n",
      "{'Mac': 9178000000.0, 'Service': 18277000000.0, 'Wearables, Home and Accessories': 8785000000.0, 'iPad': 8252000000.0, 'iPhone': 38868000000.0}\n",
      "{'Mac': 8235000000, 'Service': 17486000000, 'Wearables, Home and Accessories': 8775000000, 'iPad': 7368000000, 'iPhone': 39570000000}\n",
      "{'Mac': 9102000000, 'Service': 16901000000, 'Wearables, Home and Accessories': 7836000000, 'iPad': 7807000000, 'iPhone': 47938000000}\n",
      "{'Mac': 8675000000, 'Service': 15761000000, 'Wearables, Home and Accessories': 12971000000, 'iPad': 8435000000, 'iPhone': 65597000000}\n",
      "{'Mac': 9032000000.0, 'Service': 14549000000.0, 'Wearables, Home and Accessories': 7876000000.0, 'iPad': 6797000000.0, 'iPhone': 26444000000.0}\n",
      "{'Mac': 7079000000, 'Service': 13156000000, 'Wearables, Home and Accessories': 6450000000, 'iPad': 6582000000, 'iPhone': 26418000000}\n",
      "{'Mac': 5351000000, 'Service': 13348000000, 'Wearables, Home and Accessories': 6284000000, 'iPad': 4368000000, 'iPhone': 28962000000}\n",
      "{'Mac': 7160000000, 'Service': 12715000000, 'Wearables, Home and Accessories': 10010000000, 'iPad': 5977000000, 'iPhone': 55957000000}\n",
      "{'Mac': 6991000000.0, 'Service': 12511000000.0, 'Wearables, Home and Accessories': 6520000000.0, 'iPad': 4656000000.0, 'iPhone': 33362000000.0}\n",
      "{'Mac': 5820000000, 'Service': 11455000000, 'Wearables, Home and Accessories': 5525000000, 'iPad': 5023000000, 'iPhone': 25986000000}\n",
      "{'Mac': 5513000000, 'Service': 11450000000, 'Wearables, Home and Accessories': 5129000000, 'iPad': 4872000000, 'iPhone': 31051000000}\n",
      "{'Mac': 7416000000, 'Service': 10875000000, 'Wearables, Home and Accessories': 7308000000, 'iPad': 6729000000, 'iPhone': 51982000000}\n",
      "{'Retail': 4104000000}\n",
      "{'J P': 3963000000, 'Retail': 5227000000}\n",
      "{'J P': 4948000000, 'Retail': 6998000000}\n",
      "{'J P': 3341000000.0, 'Retail': 4472000000.0}\n",
      "{'J P': 2543000000, 'Retail': 4074000000}\n",
      "{'J P': 3135000000, 'Retail': 5241000000}\n",
      "{'J P': 4443000000, 'Retail': 6441000000}\n",
      "{'J P': 2367000000.0, 'Retail': 4229000000.0}\n",
      "{'J P': 2009000000, 'Retail': 4084000000}\n",
      "{'J P': 2645000000, 'Retail': 4399000000}\n",
      "{'J P': 3550000000, 'Retail': 6116000000}\n",
      "{'Apple Mac': 0.0, 'Apple TV': 0.0, 'Apple iPad': 16, 'Apple iPhone': 16, 'Apple iPod touch': 11, 'Retail': 3584000000.0}\n",
      "{'Apple Mac': 22, 'Apple TV': 5, 'Apple iPad': 16, 'Apple iPhone': 16, 'Apple iPod touch': 11, 'Retail': 3505000000}\n",
      "{'Retail': 3191000000}\n",
      "{'Retail': 3847000000}\n"
     ]
    }
   ],
   "source": [
    "# Iteration through all the different level of our dictionnary try 1\n",
    "# We check every item in the list of qsr\n",
    "for item in qsr:\n",
    "    # We check all the values in the dictionnary\n",
    "    for values in item.values():\n",
    "        print(values)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb711aae",
   "metadata": {},
   "source": [
    "Values correspond to all sales and categories. Categories are the main keys, and sales are the corresponding value.\n",
    "\n",
    "We a way to exctract all the information, and transform them into a data frame.\n",
    "\n",
    "We will use two was to do that:\n",
    "- The first naive one when we transform our list into a numpy array,\n",
    "- the second one where we do a list comprehension of dataframe stacked together."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "125f9dde",
   "metadata": {},
   "source": [
    "#### Naive version: numpy array"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a558ae8c",
   "metadata": {},
   "source": [
    "We will go through every single items of our JSON call, build a numpy array, and then transform our numpy array into a DataFrame."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bddabf3",
   "metadata": {},
   "source": [
    "**First method** of array would consist of building a flat array, and reshaping the array to the DataFrame we want."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "d6fce24a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[7382000000, 19604000000, 8084000000, 7224000000, 40665000000, 10435000000, 19821000000, 8806000000, 7646000000, 50570000000, 10852000000, 19516000000, 14701000000, 7248000000, 71628000000, 9178000000.0, 18277000000.0, 8785000000.0, 8252000000.0, 38868000000.0, 8235000000, 17486000000, 8775000000, 7368000000, 39570000000, 9102000000, 16901000000, 7836000000, 7807000000, 47938000000, 8675000000, 15761000000, 12971000000, 8435000000, 65597000000, 9032000000.0, 14549000000.0, 7876000000.0, 6797000000.0, 26444000000.0, 7079000000, 13156000000, 6450000000, 6582000000, 26418000000, 5351000000, 13348000000, 6284000000, 4368000000, 28962000000, 7160000000, 12715000000, 10010000000, 5977000000, 55957000000, 6991000000.0, 12511000000.0, 6520000000.0, 4656000000.0, 33362000000.0, 5820000000, 11455000000, 5525000000, 5023000000, 25986000000, 5513000000, 11450000000, 5129000000, 4872000000, 31051000000, 7416000000, 10875000000, 7308000000, 6729000000, 51982000000, 4104000000, 3963000000, 5227000000, 4948000000, 6998000000, 3341000000.0, 4472000000.0, 2543000000, 4074000000, 3135000000, 5241000000, 4443000000, 6441000000, 2367000000.0, 4229000000.0, 2009000000, 4084000000, 2645000000, 4399000000, 3550000000, 6116000000, 0.0, 0.0, 16, 16, 11, 3584000000.0, 22, 5, 16, 16, 11, 3505000000, 3191000000, 3847000000]\n"
     ]
    }
   ],
   "source": [
    "# First Method of array\n",
    "arraylist = []\n",
    "for quarter in qsr:\n",
    "    for item in quarter.values():\n",
    "        for sales in item.values():\n",
    "            arraylist.append(sales)\n",
    "            \n",
    "print(arraylist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "2afbde84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(110,)\n"
     ]
    }
   ],
   "source": [
    "# Let's check our array dimension\n",
    "dfarray = np.array(arraylist)\n",
    "print(dfarray.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4eeb2a88",
   "metadata": {},
   "source": [
    "We know that we want the quarters where all the information is available and available for an entire year before 2022.\n",
    "This correspond to 3 years (2019, 2020, 2021) with 24 data entry points for each year, and two quarters of 2022 which correspondes to 12 data entry points.\n",
    "\n",
    "In total, that would correspond to 24 * 3 + 12 = 72 + 12 = 84 data points.\n",
    "\n",
    "We can slice through our array to eliminate all data points after the 84th one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "2e92f6a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(70,)\n"
     ]
    }
   ],
   "source": [
    "# Slicing through our array\n",
    "dfarray = dfarray[:70,]\n",
    "\n",
    "# Checking our array shape\n",
    "print(dfarray.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d36d1de",
   "metadata": {},
   "source": [
    "Now we need to change the dimension of our array to make sure we get a 6 elements per line.\n",
    "\n",
    "Knowing that we have three years plus two additional quarters, we have 14 lines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "7a57b9b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Changing the shape of our numpy array that corresponds to our targeted dataframe\n",
    "dfarray = dfarray.reshape((14,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "bbc34333",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(14, 5)\n"
     ]
    }
   ],
   "source": [
    "print(dfarray.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a29b81fe",
   "metadata": {},
   "source": [
    "We need to build our index and column name for our Data Frame:\n",
    "- index will correspond to the keys of our first layer dictionnary,\n",
    "- columns will correspond to the name of each value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "6d93446c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2022-06-25', '2022-03-26', '2021-12-25', '2021-09-25', '2021-06-26', '2021-03-27', '2020-12-26', '2020-09-26', '2020-06-27', '2020-03-28', '2019-12-28', '2019-09-28', '2019-06-29', '2019-03-30']\n",
      "14\n"
     ]
    }
   ],
   "source": [
    "# Building our index list\n",
    "# Creating our empty list\n",
    "index = []\n",
    "# Iterating through the different existing dictionnary\n",
    "for item in qsr:\n",
    "    # Extracting the keys\n",
    "    for key in item.keys():\n",
    "        index.append(key)\n",
    "\n",
    "# Extracting the right number of keys\n",
    "index = index[:14]\n",
    "\n",
    "# Checking our list and length\n",
    "print(index)\n",
    "print(len(index))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "f1120d85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Mac', 'Service', 'Wearables, Home and Accessories', 'iPad', 'iPhone']\n"
     ]
    }
   ],
   "source": [
    "# Building our columns name\n",
    "# Creating our empty column list\n",
    "columns = []\n",
    "\n",
    "# We check every item in the list of qsr\n",
    "for item in qsr:\n",
    "    # We check all the values in the dictionnary\n",
    "    for qrt in item.values():\n",
    "            # Extracting all the keys of each array\n",
    "            for key in qrt.keys():\n",
    "                # Building our list\n",
    "                columns.append(key)\n",
    "                # Extracting the first column\n",
    "                columns = columns[:5]\n",
    "\n",
    "print(columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58cc3004",
   "metadata": {},
   "source": [
    "We have our index and columns ready to build our dataframe.\n",
    "\n",
    "NB: there could have been another method to extract our columns name like building another list, and checking if each value is unique."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "c0b89dbf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mac</th>\n",
       "      <th>Service</th>\n",
       "      <th>Wearables, Home and Accessories</th>\n",
       "      <th>iPad</th>\n",
       "      <th>iPhone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-06-25</th>\n",
       "      <td>7.382000e+09</td>\n",
       "      <td>1.960400e+10</td>\n",
       "      <td>8.084000e+09</td>\n",
       "      <td>7.224000e+09</td>\n",
       "      <td>4.066500e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-03-26</th>\n",
       "      <td>1.043500e+10</td>\n",
       "      <td>1.982100e+10</td>\n",
       "      <td>8.806000e+09</td>\n",
       "      <td>7.646000e+09</td>\n",
       "      <td>5.057000e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-25</th>\n",
       "      <td>1.085200e+10</td>\n",
       "      <td>1.951600e+10</td>\n",
       "      <td>1.470100e+10</td>\n",
       "      <td>7.248000e+09</td>\n",
       "      <td>7.162800e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-25</th>\n",
       "      <td>9.178000e+09</td>\n",
       "      <td>1.827700e+10</td>\n",
       "      <td>8.785000e+09</td>\n",
       "      <td>8.252000e+09</td>\n",
       "      <td>3.886800e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-06-26</th>\n",
       "      <td>8.235000e+09</td>\n",
       "      <td>1.748600e+10</td>\n",
       "      <td>8.775000e+09</td>\n",
       "      <td>7.368000e+09</td>\n",
       "      <td>3.957000e+10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Mac       Service  Wearables, Home and Accessories  \\\n",
       "2022-06-25  7.382000e+09  1.960400e+10                     8.084000e+09   \n",
       "2022-03-26  1.043500e+10  1.982100e+10                     8.806000e+09   \n",
       "2021-12-25  1.085200e+10  1.951600e+10                     1.470100e+10   \n",
       "2021-09-25  9.178000e+09  1.827700e+10                     8.785000e+09   \n",
       "2021-06-26  8.235000e+09  1.748600e+10                     8.775000e+09   \n",
       "\n",
       "                    iPad        iPhone  \n",
       "2022-06-25  7.224000e+09  4.066500e+10  \n",
       "2022-03-26  7.646000e+09  5.057000e+10  \n",
       "2021-12-25  7.248000e+09  7.162800e+10  \n",
       "2021-09-25  8.252000e+09  3.886800e+10  \n",
       "2021-06-26  7.368000e+09  3.957000e+10  "
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Finally building our DataFrame\n",
    "df1 = pd.DataFrame(dfarray, columns=columns, index=index)\n",
    "\n",
    "# Let's inspect our dataframe\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "351021c0",
   "metadata": {},
   "source": [
    "Of course, there is still work to such as:\n",
    "- changing the index type to timestamp,\n",
    "- computing some additional data such as total sales, pourcentage of sales, etc.\n",
    "- having some EDA of Apple's sales."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c30d22a5",
   "metadata": {},
   "source": [
    "#### Second version: stacking pandas dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "618d6589",
   "metadata": {},
   "source": [
    "In this version, we will create a stacked pandas dataframe by running through each dictionnary, transforming them into dataframe, and stacking them all together."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a775a4c",
   "metadata": {},
   "source": [
    "###### Building our list of dataframe\n",
    "\n",
    "We first need to build a list with all the dataframes that we want to have in our main dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "ae3c590e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n",
      "            0            1                                2           3  \\\n",
      "0         Mac      Service  Wearables, Home and Accessories        iPad   \n",
      "1  7382000000  19604000000                       8084000000  7224000000   \n",
      "\n",
      "             4  \n",
      "0       iPhone  \n",
      "1  40665000000  \n"
     ]
    }
   ],
   "source": [
    "# Running through the different dictionnaries and creating our list of dataframes.\n",
    "# We create an empty list that will contain our list of DataFrame\n",
    "df_list = []\n",
    "\n",
    "# We iterate through the values of our list which are dictionnaries\n",
    "for item in qsr:\n",
    "    \n",
    "    # We iterate through the values of each dictionnary of our list\n",
    "    for values in item.values():\n",
    "        # We only keep the ones with the right shape\n",
    "        if pd.DataFrame.from_dict(values.items()).transpose().shape == (2,5):\n",
    "            # We append the each element to our list at the beginning\n",
    "            # It's important to transpose each dataframe to have as a column the name of each categories of sales\n",
    "            df_list.append(pd.DataFrame.from_dict(values.items()).transpose())\n",
    "\n",
    "# We only keep the element we want for our analysis\n",
    "df_list = df_list[:14]\n",
    "\n",
    "# We should have 14 elements in our list\n",
    "print(len(df_list))\n",
    "\n",
    "# Inspecting the list\n",
    "print(df_list[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f436c57",
   "metadata": {},
   "source": [
    "Our list consists of 2 by 5 dataframes which combines price and categories."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10e0ed9c",
   "metadata": {},
   "source": [
    "##### Preparing our dataframe elements: column and index"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05391ba2",
   "metadata": {},
   "source": [
    "We prepare our column by iterating through our list, and our index by extracting the keys of our initial call."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "3b4ec65b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Mac', 'Service', 'Wearables, Home and Accessories', 'iPad', 'iPhone']\n"
     ]
    }
   ],
   "source": [
    "# Preparing our columns\n",
    "# Building and empty list\n",
    "columns = []\n",
    "\n",
    "# Going through our list\n",
    "for i in range(0,5):\n",
    "    columns.append(df_list[0][i][0])\n",
    "    \n",
    "print(columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "743c9a6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['2022-06-25',\n",
       " '2022-03-26',\n",
       " '2021-12-25',\n",
       " '2021-09-25',\n",
       " '2021-06-26',\n",
       " '2021-03-27',\n",
       " '2020-12-26',\n",
       " '2020-09-26',\n",
       " '2020-06-27',\n",
       " '2020-03-28',\n",
       " '2019-12-28',\n",
       " '2019-09-28',\n",
       " '2019-06-29',\n",
       " '2019-03-30']"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Preparing our index\n",
    "\n",
    "# Building our list\n",
    "index = []\n",
    "\n",
    "# Iteration through all the different element of our list, and the keys of our dictionnaries that are added to our index list\n",
    "for item in qsr:\n",
    "    for key in item.keys():\n",
    "        index.append(key)\n",
    "\n",
    "# Selecting the first 14 dates\n",
    "index = index[:14]\n",
    "\n",
    "# Inspecting\n",
    "index"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4955532",
   "metadata": {},
   "source": [
    "##### Stacking our dataframe and editing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa732e49",
   "metadata": {},
   "source": [
    "We are all set and ready. We can now build our dataframe of sales of Apple.\n",
    "\n",
    "We will do that by:\n",
    "- concatenating our list of dataframes,\n",
    "- changing the column names using our list of column,\n",
    "- changing the index using our list of index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "id": "d53de726",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mac</td>\n",
       "      <td>Service</td>\n",
       "      <td>Wearables, Home and Accessories</td>\n",
       "      <td>iPad</td>\n",
       "      <td>iPhone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7382000000</td>\n",
       "      <td>19604000000</td>\n",
       "      <td>8084000000</td>\n",
       "      <td>7224000000</td>\n",
       "      <td>40665000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mac</td>\n",
       "      <td>Service</td>\n",
       "      <td>Wearables, Home and Accessories</td>\n",
       "      <td>iPad</td>\n",
       "      <td>iPhone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10435000000</td>\n",
       "      <td>19821000000</td>\n",
       "      <td>8806000000</td>\n",
       "      <td>7646000000</td>\n",
       "      <td>50570000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mac</td>\n",
       "      <td>Service</td>\n",
       "      <td>Wearables, Home and Accessories</td>\n",
       "      <td>iPad</td>\n",
       "      <td>iPhone</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             0            1                                2           3  \\\n",
       "0          Mac      Service  Wearables, Home and Accessories        iPad   \n",
       "1   7382000000  19604000000                       8084000000  7224000000   \n",
       "0          Mac      Service  Wearables, Home and Accessories        iPad   \n",
       "1  10435000000  19821000000                       8806000000  7646000000   \n",
       "0          Mac      Service  Wearables, Home and Accessories        iPad   \n",
       "\n",
       "             4  \n",
       "0       iPhone  \n",
       "1  40665000000  \n",
       "0       iPhone  \n",
       "1  50570000000  \n",
       "0       iPhone  "
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Concatenating our dataframe\n",
    "df2 = pd.concat(df_list)\n",
    "\n",
    "# Inspecting\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88c5348d",
   "metadata": {},
   "source": [
    "We see that our concatenation of data has taken the row containing each categories for each concatenation. We need to get rid of those.\n",
    "\n",
    "The easiest way is to filter indexes that are equal to 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "id": "5290e18b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7382000000</td>\n",
       "      <td>19604000000</td>\n",
       "      <td>8084000000</td>\n",
       "      <td>7224000000</td>\n",
       "      <td>40665000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10435000000</td>\n",
       "      <td>19821000000</td>\n",
       "      <td>8806000000</td>\n",
       "      <td>7646000000</td>\n",
       "      <td>50570000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10852000000</td>\n",
       "      <td>19516000000</td>\n",
       "      <td>14701000000</td>\n",
       "      <td>7248000000</td>\n",
       "      <td>71628000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9178000000.0</td>\n",
       "      <td>18277000000.0</td>\n",
       "      <td>8785000000.0</td>\n",
       "      <td>8252000000.0</td>\n",
       "      <td>38868000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8235000000</td>\n",
       "      <td>17486000000</td>\n",
       "      <td>8775000000</td>\n",
       "      <td>7368000000</td>\n",
       "      <td>39570000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9102000000</td>\n",
       "      <td>16901000000</td>\n",
       "      <td>7836000000</td>\n",
       "      <td>7807000000</td>\n",
       "      <td>47938000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8675000000</td>\n",
       "      <td>15761000000</td>\n",
       "      <td>12971000000</td>\n",
       "      <td>8435000000</td>\n",
       "      <td>65597000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9032000000.0</td>\n",
       "      <td>14549000000.0</td>\n",
       "      <td>7876000000.0</td>\n",
       "      <td>6797000000.0</td>\n",
       "      <td>26444000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7079000000</td>\n",
       "      <td>13156000000</td>\n",
       "      <td>6450000000</td>\n",
       "      <td>6582000000</td>\n",
       "      <td>26418000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5351000000</td>\n",
       "      <td>13348000000</td>\n",
       "      <td>6284000000</td>\n",
       "      <td>4368000000</td>\n",
       "      <td>28962000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7160000000</td>\n",
       "      <td>12715000000</td>\n",
       "      <td>10010000000</td>\n",
       "      <td>5977000000</td>\n",
       "      <td>55957000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6991000000.0</td>\n",
       "      <td>12511000000.0</td>\n",
       "      <td>6520000000.0</td>\n",
       "      <td>4656000000.0</td>\n",
       "      <td>33362000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5820000000</td>\n",
       "      <td>11455000000</td>\n",
       "      <td>5525000000</td>\n",
       "      <td>5023000000</td>\n",
       "      <td>25986000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5513000000</td>\n",
       "      <td>11450000000</td>\n",
       "      <td>5129000000</td>\n",
       "      <td>4872000000</td>\n",
       "      <td>31051000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              0              1             2             3              4\n",
       "1    7382000000    19604000000    8084000000    7224000000    40665000000\n",
       "1   10435000000    19821000000    8806000000    7646000000    50570000000\n",
       "1   10852000000    19516000000   14701000000    7248000000    71628000000\n",
       "1  9178000000.0  18277000000.0  8785000000.0  8252000000.0  38868000000.0\n",
       "1    8235000000    17486000000    8775000000    7368000000    39570000000\n",
       "1    9102000000    16901000000    7836000000    7807000000    47938000000\n",
       "1    8675000000    15761000000   12971000000    8435000000    65597000000\n",
       "1  9032000000.0  14549000000.0  7876000000.0  6797000000.0  26444000000.0\n",
       "1    7079000000    13156000000    6450000000    6582000000    26418000000\n",
       "1    5351000000    13348000000    6284000000    4368000000    28962000000\n",
       "1    7160000000    12715000000   10010000000    5977000000    55957000000\n",
       "1  6991000000.0  12511000000.0  6520000000.0  4656000000.0  33362000000.0\n",
       "1    5820000000    11455000000    5525000000    5023000000    25986000000\n",
       "1    5513000000    11450000000    5129000000    4872000000    31051000000"
      ]
     },
     "execution_count": 227,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Removing unnecessary lines with filtering\n",
    "df2 = df2[df2.index.values == 1]\n",
    "\n",
    "# Inspecting\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb08abe5",
   "metadata": {},
   "source": [
    "We then need to reset index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "6dc599ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We use the reset index method \n",
    "df2.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "id": "2571966d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>7382000000</td>\n",
       "      <td>19604000000</td>\n",
       "      <td>8084000000</td>\n",
       "      <td>7224000000</td>\n",
       "      <td>40665000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>10435000000</td>\n",
       "      <td>19821000000</td>\n",
       "      <td>8806000000</td>\n",
       "      <td>7646000000</td>\n",
       "      <td>50570000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>10852000000</td>\n",
       "      <td>19516000000</td>\n",
       "      <td>14701000000</td>\n",
       "      <td>7248000000</td>\n",
       "      <td>71628000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>9178000000.0</td>\n",
       "      <td>18277000000.0</td>\n",
       "      <td>8785000000.0</td>\n",
       "      <td>8252000000.0</td>\n",
       "      <td>38868000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>8235000000</td>\n",
       "      <td>17486000000</td>\n",
       "      <td>8775000000</td>\n",
       "      <td>7368000000</td>\n",
       "      <td>39570000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>9102000000</td>\n",
       "      <td>16901000000</td>\n",
       "      <td>7836000000</td>\n",
       "      <td>7807000000</td>\n",
       "      <td>47938000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>8675000000</td>\n",
       "      <td>15761000000</td>\n",
       "      <td>12971000000</td>\n",
       "      <td>8435000000</td>\n",
       "      <td>65597000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>9032000000.0</td>\n",
       "      <td>14549000000.0</td>\n",
       "      <td>7876000000.0</td>\n",
       "      <td>6797000000.0</td>\n",
       "      <td>26444000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>7079000000</td>\n",
       "      <td>13156000000</td>\n",
       "      <td>6450000000</td>\n",
       "      <td>6582000000</td>\n",
       "      <td>26418000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>5351000000</td>\n",
       "      <td>13348000000</td>\n",
       "      <td>6284000000</td>\n",
       "      <td>4368000000</td>\n",
       "      <td>28962000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>7160000000</td>\n",
       "      <td>12715000000</td>\n",
       "      <td>10010000000</td>\n",
       "      <td>5977000000</td>\n",
       "      <td>55957000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1</td>\n",
       "      <td>6991000000.0</td>\n",
       "      <td>12511000000.0</td>\n",
       "      <td>6520000000.0</td>\n",
       "      <td>4656000000.0</td>\n",
       "      <td>33362000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1</td>\n",
       "      <td>5820000000</td>\n",
       "      <td>11455000000</td>\n",
       "      <td>5525000000</td>\n",
       "      <td>5023000000</td>\n",
       "      <td>25986000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1</td>\n",
       "      <td>5513000000</td>\n",
       "      <td>11450000000</td>\n",
       "      <td>5129000000</td>\n",
       "      <td>4872000000</td>\n",
       "      <td>31051000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index             0              1             2             3  \\\n",
       "0       1    7382000000    19604000000    8084000000    7224000000   \n",
       "1       1   10435000000    19821000000    8806000000    7646000000   \n",
       "2       1   10852000000    19516000000   14701000000    7248000000   \n",
       "3       1  9178000000.0  18277000000.0  8785000000.0  8252000000.0   \n",
       "4       1    8235000000    17486000000    8775000000    7368000000   \n",
       "5       1    9102000000    16901000000    7836000000    7807000000   \n",
       "6       1    8675000000    15761000000   12971000000    8435000000   \n",
       "7       1  9032000000.0  14549000000.0  7876000000.0  6797000000.0   \n",
       "8       1    7079000000    13156000000    6450000000    6582000000   \n",
       "9       1    5351000000    13348000000    6284000000    4368000000   \n",
       "10      1    7160000000    12715000000   10010000000    5977000000   \n",
       "11      1  6991000000.0  12511000000.0  6520000000.0  4656000000.0   \n",
       "12      1    5820000000    11455000000    5525000000    5023000000   \n",
       "13      1    5513000000    11450000000    5129000000    4872000000   \n",
       "\n",
       "                4  \n",
       "0     40665000000  \n",
       "1     50570000000  \n",
       "2     71628000000  \n",
       "3   38868000000.0  \n",
       "4     39570000000  \n",
       "5     47938000000  \n",
       "6     65597000000  \n",
       "7   26444000000.0  \n",
       "8     26418000000  \n",
       "9     28962000000  \n",
       "10    55957000000  \n",
       "11  33362000000.0  \n",
       "12    25986000000  \n",
       "13    31051000000  "
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Inspecting\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac07b8b0",
   "metadata": {},
   "source": [
    "We now get rid of 'level_0' and 'index' column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "6be9d50a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# using the drop method with inplace= True\n",
    "df2.drop(columns=[\"index\"], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "id": "493c58ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7382000000</td>\n",
       "      <td>19604000000</td>\n",
       "      <td>8084000000</td>\n",
       "      <td>7224000000</td>\n",
       "      <td>40665000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10435000000</td>\n",
       "      <td>19821000000</td>\n",
       "      <td>8806000000</td>\n",
       "      <td>7646000000</td>\n",
       "      <td>50570000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10852000000</td>\n",
       "      <td>19516000000</td>\n",
       "      <td>14701000000</td>\n",
       "      <td>7248000000</td>\n",
       "      <td>71628000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9178000000.0</td>\n",
       "      <td>18277000000.0</td>\n",
       "      <td>8785000000.0</td>\n",
       "      <td>8252000000.0</td>\n",
       "      <td>38868000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8235000000</td>\n",
       "      <td>17486000000</td>\n",
       "      <td>8775000000</td>\n",
       "      <td>7368000000</td>\n",
       "      <td>39570000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9102000000</td>\n",
       "      <td>16901000000</td>\n",
       "      <td>7836000000</td>\n",
       "      <td>7807000000</td>\n",
       "      <td>47938000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8675000000</td>\n",
       "      <td>15761000000</td>\n",
       "      <td>12971000000</td>\n",
       "      <td>8435000000</td>\n",
       "      <td>65597000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>9032000000.0</td>\n",
       "      <td>14549000000.0</td>\n",
       "      <td>7876000000.0</td>\n",
       "      <td>6797000000.0</td>\n",
       "      <td>26444000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>7079000000</td>\n",
       "      <td>13156000000</td>\n",
       "      <td>6450000000</td>\n",
       "      <td>6582000000</td>\n",
       "      <td>26418000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5351000000</td>\n",
       "      <td>13348000000</td>\n",
       "      <td>6284000000</td>\n",
       "      <td>4368000000</td>\n",
       "      <td>28962000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>7160000000</td>\n",
       "      <td>12715000000</td>\n",
       "      <td>10010000000</td>\n",
       "      <td>5977000000</td>\n",
       "      <td>55957000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>6991000000.0</td>\n",
       "      <td>12511000000.0</td>\n",
       "      <td>6520000000.0</td>\n",
       "      <td>4656000000.0</td>\n",
       "      <td>33362000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5820000000</td>\n",
       "      <td>11455000000</td>\n",
       "      <td>5525000000</td>\n",
       "      <td>5023000000</td>\n",
       "      <td>25986000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>5513000000</td>\n",
       "      <td>11450000000</td>\n",
       "      <td>5129000000</td>\n",
       "      <td>4872000000</td>\n",
       "      <td>31051000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               0              1             2             3              4\n",
       "0     7382000000    19604000000    8084000000    7224000000    40665000000\n",
       "1    10435000000    19821000000    8806000000    7646000000    50570000000\n",
       "2    10852000000    19516000000   14701000000    7248000000    71628000000\n",
       "3   9178000000.0  18277000000.0  8785000000.0  8252000000.0  38868000000.0\n",
       "4     8235000000    17486000000    8775000000    7368000000    39570000000\n",
       "5     9102000000    16901000000    7836000000    7807000000    47938000000\n",
       "6     8675000000    15761000000   12971000000    8435000000    65597000000\n",
       "7   9032000000.0  14549000000.0  7876000000.0  6797000000.0  26444000000.0\n",
       "8     7079000000    13156000000    6450000000    6582000000    26418000000\n",
       "9     5351000000    13348000000    6284000000    4368000000    28962000000\n",
       "10    7160000000    12715000000   10010000000    5977000000    55957000000\n",
       "11  6991000000.0  12511000000.0  6520000000.0  4656000000.0  33362000000.0\n",
       "12    5820000000    11455000000    5525000000    5023000000    25986000000\n",
       "13    5513000000    11450000000    5129000000    4872000000    31051000000"
      ]
     },
     "execution_count": 231,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Inspecting\n",
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9681fbd",
   "metadata": {},
   "source": [
    "Now we need to change our column names and index names. We just need to call our list on the different attribute of our dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "fcd3bb2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We then rename our column\n",
    "df2.columns=columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "id": "7bf08405",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.index=index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "id": "56809dda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mac</th>\n",
       "      <th>Service</th>\n",
       "      <th>Wearables, Home and Accessories</th>\n",
       "      <th>iPad</th>\n",
       "      <th>iPhone</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-06-25</th>\n",
       "      <td>7382000000</td>\n",
       "      <td>19604000000</td>\n",
       "      <td>8084000000</td>\n",
       "      <td>7224000000</td>\n",
       "      <td>40665000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-03-26</th>\n",
       "      <td>10435000000</td>\n",
       "      <td>19821000000</td>\n",
       "      <td>8806000000</td>\n",
       "      <td>7646000000</td>\n",
       "      <td>50570000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-25</th>\n",
       "      <td>10852000000</td>\n",
       "      <td>19516000000</td>\n",
       "      <td>14701000000</td>\n",
       "      <td>7248000000</td>\n",
       "      <td>71628000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-25</th>\n",
       "      <td>9178000000.0</td>\n",
       "      <td>18277000000.0</td>\n",
       "      <td>8785000000.0</td>\n",
       "      <td>8252000000.0</td>\n",
       "      <td>38868000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-06-26</th>\n",
       "      <td>8235000000</td>\n",
       "      <td>17486000000</td>\n",
       "      <td>8775000000</td>\n",
       "      <td>7368000000</td>\n",
       "      <td>39570000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-27</th>\n",
       "      <td>9102000000</td>\n",
       "      <td>16901000000</td>\n",
       "      <td>7836000000</td>\n",
       "      <td>7807000000</td>\n",
       "      <td>47938000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-26</th>\n",
       "      <td>8675000000</td>\n",
       "      <td>15761000000</td>\n",
       "      <td>12971000000</td>\n",
       "      <td>8435000000</td>\n",
       "      <td>65597000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-26</th>\n",
       "      <td>9032000000.0</td>\n",
       "      <td>14549000000.0</td>\n",
       "      <td>7876000000.0</td>\n",
       "      <td>6797000000.0</td>\n",
       "      <td>26444000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-06-27</th>\n",
       "      <td>7079000000</td>\n",
       "      <td>13156000000</td>\n",
       "      <td>6450000000</td>\n",
       "      <td>6582000000</td>\n",
       "      <td>26418000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-28</th>\n",
       "      <td>5351000000</td>\n",
       "      <td>13348000000</td>\n",
       "      <td>6284000000</td>\n",
       "      <td>4368000000</td>\n",
       "      <td>28962000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-28</th>\n",
       "      <td>7160000000</td>\n",
       "      <td>12715000000</td>\n",
       "      <td>10010000000</td>\n",
       "      <td>5977000000</td>\n",
       "      <td>55957000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-09-28</th>\n",
       "      <td>6991000000.0</td>\n",
       "      <td>12511000000.0</td>\n",
       "      <td>6520000000.0</td>\n",
       "      <td>4656000000.0</td>\n",
       "      <td>33362000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-29</th>\n",
       "      <td>5820000000</td>\n",
       "      <td>11455000000</td>\n",
       "      <td>5525000000</td>\n",
       "      <td>5023000000</td>\n",
       "      <td>25986000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-30</th>\n",
       "      <td>5513000000</td>\n",
       "      <td>11450000000</td>\n",
       "      <td>5129000000</td>\n",
       "      <td>4872000000</td>\n",
       "      <td>31051000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Mac        Service Wearables, Home and Accessories  \\\n",
       "2022-06-25    7382000000    19604000000                      8084000000   \n",
       "2022-03-26   10435000000    19821000000                      8806000000   \n",
       "2021-12-25   10852000000    19516000000                     14701000000   \n",
       "2021-09-25  9178000000.0  18277000000.0                    8785000000.0   \n",
       "2021-06-26    8235000000    17486000000                      8775000000   \n",
       "2021-03-27    9102000000    16901000000                      7836000000   \n",
       "2020-12-26    8675000000    15761000000                     12971000000   \n",
       "2020-09-26  9032000000.0  14549000000.0                    7876000000.0   \n",
       "2020-06-27    7079000000    13156000000                      6450000000   \n",
       "2020-03-28    5351000000    13348000000                      6284000000   \n",
       "2019-12-28    7160000000    12715000000                     10010000000   \n",
       "2019-09-28  6991000000.0  12511000000.0                    6520000000.0   \n",
       "2019-06-29    5820000000    11455000000                      5525000000   \n",
       "2019-03-30    5513000000    11450000000                      5129000000   \n",
       "\n",
       "                    iPad         iPhone  \n",
       "2022-06-25    7224000000    40665000000  \n",
       "2022-03-26    7646000000    50570000000  \n",
       "2021-12-25    7248000000    71628000000  \n",
       "2021-09-25  8252000000.0  38868000000.0  \n",
       "2021-06-26    7368000000    39570000000  \n",
       "2021-03-27    7807000000    47938000000  \n",
       "2020-12-26    8435000000    65597000000  \n",
       "2020-09-26  6797000000.0  26444000000.0  \n",
       "2020-06-27    6582000000    26418000000  \n",
       "2020-03-28    4368000000    28962000000  \n",
       "2019-12-28    5977000000    55957000000  \n",
       "2019-09-28  4656000000.0  33362000000.0  \n",
       "2019-06-29    5023000000    25986000000  \n",
       "2019-03-30    4872000000    31051000000  "
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0cba50e",
   "metadata": {},
   "source": [
    "#### Conclusion on building our dataframe\n",
    "\n",
    "The numpy technique and the pandas technique work pretty well. While numpy arrays are slightly more flexible in terms of data compared to the pandas datarame, the latter in terms of rapidy is easier to compute."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be07fc20",
   "metadata": {},
   "source": [
    "### Converting index to datetime index"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "282f9239",
   "metadata": {},
   "source": [
    "One thing a lot of article omit that having the wrong type of index might not be very helpful when working.\n",
    "\n",
    "Especially in finance and economics where data are mostly timeseries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "id": "9fca14b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting our dataframe index to datetime index\n",
    "df2.index = pd.to_datetime(df2.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "e9a55f35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "DatetimeIndex: 14 entries, 2022-06-25 to 2019-03-30\n",
      "Data columns (total 5 columns):\n",
      " #   Column                           Non-Null Count  Dtype \n",
      "---  ------                           --------------  ----- \n",
      " 0   Mac                              14 non-null     object\n",
      " 1   Service                          14 non-null     object\n",
      " 2   Wearables, Home and Accessories  14 non-null     object\n",
      " 3   iPad                             14 non-null     object\n",
      " 4   iPhone                           14 non-null     object\n",
      "dtypes: object(5)\n",
      "memory usage: 672.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "# Inspecting\n",
    "df2.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1543961",
   "metadata": {},
   "source": [
    "## Sales analysis & datavisualization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7bc8802",
   "metadata": {},
   "source": [
    "Now that we have set up correctly our dataframe, we can dig into our sales.\n",
    "\n",
    "We'll use the df2 dataframe as our main dataframe, though the df1 dataframe perfectly works as well.\n",
    "\n",
    "Our goal is to understand the structure of revenue of Apple and be able to perform some visualization."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44530bf2",
   "metadata": {},
   "source": [
    "#### Total sales\n",
    "\n",
    "Total sales will help us assess how well the company has been performing over the last quarters. By building a timeseries of sales, we will be able to perform some models that take into account exogenous data to analyze sales."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "id": "aeaf4f0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding a total sales column to our dataframe\n",
    "df2['total sales'] = df2.sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "0e8f6153",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mac</th>\n",
       "      <th>Service</th>\n",
       "      <th>Wearables, Home and Accessories</th>\n",
       "      <th>iPad</th>\n",
       "      <th>iPhone</th>\n",
       "      <th>total sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-06-25</th>\n",
       "      <td>7382000000</td>\n",
       "      <td>19604000000</td>\n",
       "      <td>8084000000</td>\n",
       "      <td>7224000000</td>\n",
       "      <td>40665000000</td>\n",
       "      <td>8.295900e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-03-26</th>\n",
       "      <td>10435000000</td>\n",
       "      <td>19821000000</td>\n",
       "      <td>8806000000</td>\n",
       "      <td>7646000000</td>\n",
       "      <td>50570000000</td>\n",
       "      <td>9.727800e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-25</th>\n",
       "      <td>10852000000</td>\n",
       "      <td>19516000000</td>\n",
       "      <td>14701000000</td>\n",
       "      <td>7248000000</td>\n",
       "      <td>71628000000</td>\n",
       "      <td>1.239450e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-25</th>\n",
       "      <td>9178000000.0</td>\n",
       "      <td>18277000000.0</td>\n",
       "      <td>8785000000.0</td>\n",
       "      <td>8252000000.0</td>\n",
       "      <td>38868000000.0</td>\n",
       "      <td>8.336000e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-06-26</th>\n",
       "      <td>8235000000</td>\n",
       "      <td>17486000000</td>\n",
       "      <td>8775000000</td>\n",
       "      <td>7368000000</td>\n",
       "      <td>39570000000</td>\n",
       "      <td>8.143400e+10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Mac        Service Wearables, Home and Accessories  \\\n",
       "2022-06-25    7382000000    19604000000                      8084000000   \n",
       "2022-03-26   10435000000    19821000000                      8806000000   \n",
       "2021-12-25   10852000000    19516000000                     14701000000   \n",
       "2021-09-25  9178000000.0  18277000000.0                    8785000000.0   \n",
       "2021-06-26    8235000000    17486000000                      8775000000   \n",
       "\n",
       "                    iPad         iPhone   total sales  \n",
       "2022-06-25    7224000000    40665000000  8.295900e+10  \n",
       "2022-03-26    7646000000    50570000000  9.727800e+10  \n",
       "2021-12-25    7248000000    71628000000  1.239450e+11  \n",
       "2021-09-25  8252000000.0  38868000000.0  8.336000e+10  \n",
       "2021-06-26    7368000000    39570000000  8.143400e+10  "
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Inspecting\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "id": "9072b69c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sorting values through index\n",
    "df2.sort_index(ascending=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "6b8daea9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We are going to draw a simple line plot using matplotlib\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(df2.index, df2['total sales'])\n",
    "ax.set_xlabel('quarter date')\n",
    "ax.set_ylabel('total sales')\n",
    "ax.tick_params(axis='x', rotation=90)\n",
    "ax.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6afc5c7",
   "metadata": {},
   "source": [
    "According to our graph, it seems that Apple makes the best sales the last quarter of each year.\n",
    "\n",
    "Let's observe each sales individually."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "id": "7058bfb5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We are setting up our plots\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "# Looping through all the different columns in our dataframe\n",
    "for i in range(0,5):\n",
    "    ax.plot(df2.index, df2[columns[i]], label=columns[i])\n",
    "    \n",
    "\n",
    "    \n",
    "# Adding labels, legends, and some rotations to our parameters\n",
    "ax.set_xlabel('Quarter')\n",
    "ax.set_ylabel('Sales in $e+10')\n",
    "ax.tick_params(axis='x', rotation=45)\n",
    "ax.legend()\n",
    "\n",
    "# Showing our plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "238aead0",
   "metadata": {},
   "source": [
    "Iphones is the category that has the most impact on Apple Sales in the last 3 years.\n",
    "\n",
    "Sales seems to also be higher in the last quarter of each year.\n",
    "\n",
    "Let's sort values of our total sales in Apple's latest results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "id": "0805c922",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mac</th>\n",
       "      <th>Service</th>\n",
       "      <th>Wearables, Home and Accessories</th>\n",
       "      <th>iPad</th>\n",
       "      <th>iPhone</th>\n",
       "      <th>total sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-12-25</th>\n",
       "      <td>10852000000</td>\n",
       "      <td>19516000000</td>\n",
       "      <td>14701000000</td>\n",
       "      <td>7248000000</td>\n",
       "      <td>71628000000</td>\n",
       "      <td>1.239450e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-26</th>\n",
       "      <td>8675000000</td>\n",
       "      <td>15761000000</td>\n",
       "      <td>12971000000</td>\n",
       "      <td>8435000000</td>\n",
       "      <td>65597000000</td>\n",
       "      <td>1.114390e+11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-03-26</th>\n",
       "      <td>10435000000</td>\n",
       "      <td>19821000000</td>\n",
       "      <td>8806000000</td>\n",
       "      <td>7646000000</td>\n",
       "      <td>50570000000</td>\n",
       "      <td>9.727800e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-28</th>\n",
       "      <td>7160000000</td>\n",
       "      <td>12715000000</td>\n",
       "      <td>10010000000</td>\n",
       "      <td>5977000000</td>\n",
       "      <td>55957000000</td>\n",
       "      <td>9.181900e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-27</th>\n",
       "      <td>9102000000</td>\n",
       "      <td>16901000000</td>\n",
       "      <td>7836000000</td>\n",
       "      <td>7807000000</td>\n",
       "      <td>47938000000</td>\n",
       "      <td>8.958400e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-25</th>\n",
       "      <td>9178000000.0</td>\n",
       "      <td>18277000000.0</td>\n",
       "      <td>8785000000.0</td>\n",
       "      <td>8252000000.0</td>\n",
       "      <td>38868000000.0</td>\n",
       "      <td>8.336000e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-25</th>\n",
       "      <td>7382000000</td>\n",
       "      <td>19604000000</td>\n",
       "      <td>8084000000</td>\n",
       "      <td>7224000000</td>\n",
       "      <td>40665000000</td>\n",
       "      <td>8.295900e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-06-26</th>\n",
       "      <td>8235000000</td>\n",
       "      <td>17486000000</td>\n",
       "      <td>8775000000</td>\n",
       "      <td>7368000000</td>\n",
       "      <td>39570000000</td>\n",
       "      <td>8.143400e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-26</th>\n",
       "      <td>9032000000.0</td>\n",
       "      <td>14549000000.0</td>\n",
       "      <td>7876000000.0</td>\n",
       "      <td>6797000000.0</td>\n",
       "      <td>26444000000.0</td>\n",
       "      <td>6.469800e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-09-28</th>\n",
       "      <td>6991000000.0</td>\n",
       "      <td>12511000000.0</td>\n",
       "      <td>6520000000.0</td>\n",
       "      <td>4656000000.0</td>\n",
       "      <td>33362000000.0</td>\n",
       "      <td>6.404000e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-06-27</th>\n",
       "      <td>7079000000</td>\n",
       "      <td>13156000000</td>\n",
       "      <td>6450000000</td>\n",
       "      <td>6582000000</td>\n",
       "      <td>26418000000</td>\n",
       "      <td>5.968500e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-28</th>\n",
       "      <td>5351000000</td>\n",
       "      <td>13348000000</td>\n",
       "      <td>6284000000</td>\n",
       "      <td>4368000000</td>\n",
       "      <td>28962000000</td>\n",
       "      <td>5.831300e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-30</th>\n",
       "      <td>5513000000</td>\n",
       "      <td>11450000000</td>\n",
       "      <td>5129000000</td>\n",
       "      <td>4872000000</td>\n",
       "      <td>31051000000</td>\n",
       "      <td>5.801500e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-29</th>\n",
       "      <td>5820000000</td>\n",
       "      <td>11455000000</td>\n",
       "      <td>5525000000</td>\n",
       "      <td>5023000000</td>\n",
       "      <td>25986000000</td>\n",
       "      <td>5.380900e+10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Mac        Service Wearables, Home and Accessories  \\\n",
       "2021-12-25   10852000000    19516000000                     14701000000   \n",
       "2020-12-26    8675000000    15761000000                     12971000000   \n",
       "2022-03-26   10435000000    19821000000                      8806000000   \n",
       "2019-12-28    7160000000    12715000000                     10010000000   \n",
       "2021-03-27    9102000000    16901000000                      7836000000   \n",
       "2021-09-25  9178000000.0  18277000000.0                    8785000000.0   \n",
       "2022-06-25    7382000000    19604000000                      8084000000   \n",
       "2021-06-26    8235000000    17486000000                      8775000000   \n",
       "2020-09-26  9032000000.0  14549000000.0                    7876000000.0   \n",
       "2019-09-28  6991000000.0  12511000000.0                    6520000000.0   \n",
       "2020-06-27    7079000000    13156000000                      6450000000   \n",
       "2020-03-28    5351000000    13348000000                      6284000000   \n",
       "2019-03-30    5513000000    11450000000                      5129000000   \n",
       "2019-06-29    5820000000    11455000000                      5525000000   \n",
       "\n",
       "                    iPad         iPhone   total sales  \n",
       "2021-12-25    7248000000    71628000000  1.239450e+11  \n",
       "2020-12-26    8435000000    65597000000  1.114390e+11  \n",
       "2022-03-26    7646000000    50570000000  9.727800e+10  \n",
       "2019-12-28    5977000000    55957000000  9.181900e+10  \n",
       "2021-03-27    7807000000    47938000000  8.958400e+10  \n",
       "2021-09-25  8252000000.0  38868000000.0  8.336000e+10  \n",
       "2022-06-25    7224000000    40665000000  8.295900e+10  \n",
       "2021-06-26    7368000000    39570000000  8.143400e+10  \n",
       "2020-09-26  6797000000.0  26444000000.0  6.469800e+10  \n",
       "2019-09-28  4656000000.0  33362000000.0  6.404000e+10  \n",
       "2020-06-27    6582000000    26418000000  5.968500e+10  \n",
       "2020-03-28    4368000000    28962000000  5.831300e+10  \n",
       "2019-03-30    4872000000    31051000000  5.801500e+10  \n",
       "2019-06-29    5023000000    25986000000  5.380900e+10  "
      ]
     },
     "execution_count": 242,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sorting value in decreasing order using the total sales column\n",
    "df2.sort_values('total sales', ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a84799fe",
   "metadata": {},
   "source": [
    "We don't have enough sales data on Apple in 22, but according to what we see, the time where they sell the most is during the last quarter of each year.\n",
    "\n",
    "Let's now analyze piece by piece the sales of Apple: we want to build additional columns to our dataframe:\n",
    "- share of mac in the total sales,\n",
    "- share of service,\n",
    "- share of wearables,\n",
    "- share of ipad,\n",
    "- share of iphone\n",
    "\n",
    "Those numbers will be computed in pourcentage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "cc53ca71",
   "metadata": {},
   "outputs": [],
   "source": [
    "# computing our new columns\n",
    "# We the list of our new columns names\n",
    "shares = ['mac_share', 'service_share', 'accessories_share', 'ipad_share', 'iphone_share']\n",
    "\n",
    "# We create a loop to go through our list and build our additional columns\n",
    "for i in range(0,5):\n",
    "    df2[shares[i]] = (df2[columns[i]]/df2['total sales'])*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "id": "64e22fe0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mac</th>\n",
       "      <th>Service</th>\n",
       "      <th>Wearables, Home and Accessories</th>\n",
       "      <th>iPad</th>\n",
       "      <th>iPhone</th>\n",
       "      <th>total sales</th>\n",
       "      <th>mac_share</th>\n",
       "      <th>service_share</th>\n",
       "      <th>accessories_share</th>\n",
       "      <th>ipad_share</th>\n",
       "      <th>iphone_share</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-06-26</th>\n",
       "      <td>8235000000</td>\n",
       "      <td>17486000000</td>\n",
       "      <td>8775000000</td>\n",
       "      <td>7368000000</td>\n",
       "      <td>39570000000</td>\n",
       "      <td>8.143400e+10</td>\n",
       "      <td>10.112484</td>\n",
       "      <td>21.472604</td>\n",
       "      <td>10.775597</td>\n",
       "      <td>9.047818</td>\n",
       "      <td>48.591497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-25</th>\n",
       "      <td>9178000000.0</td>\n",
       "      <td>18277000000.0</td>\n",
       "      <td>8785000000.0</td>\n",
       "      <td>8252000000.0</td>\n",
       "      <td>38868000000.0</td>\n",
       "      <td>8.336000e+10</td>\n",
       "      <td>11.010077</td>\n",
       "      <td>21.925384</td>\n",
       "      <td>10.538628</td>\n",
       "      <td>9.899232</td>\n",
       "      <td>46.626679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-25</th>\n",
       "      <td>10852000000</td>\n",
       "      <td>19516000000</td>\n",
       "      <td>14701000000</td>\n",
       "      <td>7248000000</td>\n",
       "      <td>71628000000</td>\n",
       "      <td>1.239450e+11</td>\n",
       "      <td>8.755496</td>\n",
       "      <td>15.745694</td>\n",
       "      <td>11.860906</td>\n",
       "      <td>5.847755</td>\n",
       "      <td>57.790149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-03-26</th>\n",
       "      <td>10435000000</td>\n",
       "      <td>19821000000</td>\n",
       "      <td>8806000000</td>\n",
       "      <td>7646000000</td>\n",
       "      <td>50570000000</td>\n",
       "      <td>9.727800e+10</td>\n",
       "      <td>10.726989</td>\n",
       "      <td>20.375624</td>\n",
       "      <td>9.052407</td>\n",
       "      <td>7.859948</td>\n",
       "      <td>51.985033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-06-25</th>\n",
       "      <td>7382000000</td>\n",
       "      <td>19604000000</td>\n",
       "      <td>8084000000</td>\n",
       "      <td>7224000000</td>\n",
       "      <td>40665000000</td>\n",
       "      <td>8.295900e+10</td>\n",
       "      <td>8.898371</td>\n",
       "      <td>23.63095</td>\n",
       "      <td>9.744573</td>\n",
       "      <td>8.707916</td>\n",
       "      <td>49.01819</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Mac        Service Wearables, Home and Accessories  \\\n",
       "2021-06-26    8235000000    17486000000                      8775000000   \n",
       "2021-09-25  9178000000.0  18277000000.0                    8785000000.0   \n",
       "2021-12-25   10852000000    19516000000                     14701000000   \n",
       "2022-03-26   10435000000    19821000000                      8806000000   \n",
       "2022-06-25    7382000000    19604000000                      8084000000   \n",
       "\n",
       "                    iPad         iPhone   total sales  mac_share  \\\n",
       "2021-06-26    7368000000    39570000000  8.143400e+10  10.112484   \n",
       "2021-09-25  8252000000.0  38868000000.0  8.336000e+10  11.010077   \n",
       "2021-12-25    7248000000    71628000000  1.239450e+11   8.755496   \n",
       "2022-03-26    7646000000    50570000000  9.727800e+10  10.726989   \n",
       "2022-06-25    7224000000    40665000000  8.295900e+10   8.898371   \n",
       "\n",
       "           service_share accessories_share ipad_share iphone_share  \n",
       "2021-06-26     21.472604         10.775597   9.047818    48.591497  \n",
       "2021-09-25     21.925384         10.538628   9.899232    46.626679  \n",
       "2021-12-25     15.745694         11.860906   5.847755    57.790149  \n",
       "2022-03-26     20.375624          9.052407   7.859948    51.985033  \n",
       "2022-06-25      23.63095          9.744573   8.707916     49.01819  "
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Inspecting our new dataframe\n",
    "df2.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c5a4feb",
   "metadata": {},
   "source": [
    "It seems that our dataframe has become a bit too wide to fit on a our screen. Let's build a dataframe that only takes the total sales and the weight of each category. Let's call this new dataframe df_result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "id": "bed27a0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using iloc to select all rows, and the last 6 columns of our df2 dataframe\n",
    "df_result = df2.iloc[:,5:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "id": "00310f01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total sales</th>\n",
       "      <th>mac_share</th>\n",
       "      <th>service_share</th>\n",
       "      <th>accessories_share</th>\n",
       "      <th>ipad_share</th>\n",
       "      <th>iphone_share</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2019-03-30</th>\n",
       "      <td>5.801500e+10</td>\n",
       "      <td>9.502715</td>\n",
       "      <td>19.736275</td>\n",
       "      <td>8.840817</td>\n",
       "      <td>8.397828</td>\n",
       "      <td>53.522365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-29</th>\n",
       "      <td>5.380900e+10</td>\n",
       "      <td>10.816034</td>\n",
       "      <td>21.28826</td>\n",
       "      <td>10.267799</td>\n",
       "      <td>9.33487</td>\n",
       "      <td>48.293036</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-09-28</th>\n",
       "      <td>6.404000e+10</td>\n",
       "      <td>10.916615</td>\n",
       "      <td>19.536227</td>\n",
       "      <td>10.181137</td>\n",
       "      <td>7.270456</td>\n",
       "      <td>52.095565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-28</th>\n",
       "      <td>9.181900e+10</td>\n",
       "      <td>7.79795</td>\n",
       "      <td>13.847896</td>\n",
       "      <td>10.901883</td>\n",
       "      <td>6.509546</td>\n",
       "      <td>60.942724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-28</th>\n",
       "      <td>5.831300e+10</td>\n",
       "      <td>9.176341</td>\n",
       "      <td>22.890265</td>\n",
       "      <td>10.776328</td>\n",
       "      <td>7.490611</td>\n",
       "      <td>49.666455</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             total sales  mac_share service_share accessories_share  \\\n",
       "2019-03-30  5.801500e+10   9.502715     19.736275          8.840817   \n",
       "2019-06-29  5.380900e+10  10.816034      21.28826         10.267799   \n",
       "2019-09-28  6.404000e+10  10.916615     19.536227         10.181137   \n",
       "2019-12-28  9.181900e+10    7.79795     13.847896         10.901883   \n",
       "2020-03-28  5.831300e+10   9.176341     22.890265         10.776328   \n",
       "\n",
       "           ipad_share iphone_share  \n",
       "2019-03-30   8.397828    53.522365  \n",
       "2019-06-29    9.33487    48.293036  \n",
       "2019-09-28   7.270456    52.095565  \n",
       "2019-12-28   6.509546    60.942724  \n",
       "2020-03-28   7.490611    49.666455  "
      ]
     },
     "execution_count": 246,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Inspecting\n",
    "df_result.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "389f14fa",
   "metadata": {},
   "source": [
    "We can definitely see that iphone have the biggest share in the sales of Apple, followed by services.\n",
    "\n",
    "Ipad have the smallest share of Apple's revenue.\n",
    "\n",
    "Let's plot for 2021 the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "5f043352",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mac_share</th>\n",
       "      <th>service_share</th>\n",
       "      <th>accessories_share</th>\n",
       "      <th>ipad_share</th>\n",
       "      <th>iphone_share</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-03-27</th>\n",
       "      <td>10.160296</td>\n",
       "      <td>18.866092</td>\n",
       "      <td>8.747098</td>\n",
       "      <td>8.714726</td>\n",
       "      <td>53.511788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-06-26</th>\n",
       "      <td>10.112484</td>\n",
       "      <td>21.472604</td>\n",
       "      <td>10.775597</td>\n",
       "      <td>9.047818</td>\n",
       "      <td>48.591497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-09-25</th>\n",
       "      <td>11.010077</td>\n",
       "      <td>21.925384</td>\n",
       "      <td>10.538628</td>\n",
       "      <td>9.899232</td>\n",
       "      <td>46.626679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-25</th>\n",
       "      <td>8.755496</td>\n",
       "      <td>15.745694</td>\n",
       "      <td>11.860906</td>\n",
       "      <td>5.847755</td>\n",
       "      <td>57.790149</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            mac_share service_share accessories_share ipad_share iphone_share\n",
       "2021-03-27  10.160296     18.866092          8.747098   8.714726    53.511788\n",
       "2021-06-26  10.112484     21.472604         10.775597   9.047818    48.591497\n",
       "2021-09-25  11.010077     21.925384         10.538628   9.899232    46.626679\n",
       "2021-12-25   8.755496     15.745694         11.860906   5.847755    57.790149"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Building our DataFrame\n",
    "df21 = df_result.loc['2021-03-27':'2021-12-25', 'mac_share':]\n",
    "\n",
    "# Inspecting\n",
    "df21"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c97d6ad3",
   "metadata": {},
   "source": [
    "For graph reasons, we will change the index to a string index to have categorical bars."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "id": "b1207bf9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mac_share</th>\n",
       "      <th>service_share</th>\n",
       "      <th>accessories_share</th>\n",
       "      <th>ipad_share</th>\n",
       "      <th>iphone_share</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21q1</th>\n",
       "      <td>10.160296</td>\n",
       "      <td>18.866092</td>\n",
       "      <td>8.747098</td>\n",
       "      <td>8.714726</td>\n",
       "      <td>53.511788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21q2</th>\n",
       "      <td>10.112484</td>\n",
       "      <td>21.472604</td>\n",
       "      <td>10.775597</td>\n",
       "      <td>9.047818</td>\n",
       "      <td>48.591497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21q3</th>\n",
       "      <td>11.010077</td>\n",
       "      <td>21.925384</td>\n",
       "      <td>10.538628</td>\n",
       "      <td>9.899232</td>\n",
       "      <td>46.626679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21q4</th>\n",
       "      <td>8.755496</td>\n",
       "      <td>15.745694</td>\n",
       "      <td>11.860906</td>\n",
       "      <td>5.847755</td>\n",
       "      <td>57.790149</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      mac_share service_share accessories_share ipad_share iphone_share\n",
       "21q1  10.160296     18.866092          8.747098   8.714726    53.511788\n",
       "21q2  10.112484     21.472604         10.775597   9.047818    48.591497\n",
       "21q3  11.010077     21.925384         10.538628   9.899232    46.626679\n",
       "21q4   8.755496     15.745694         11.860906   5.847755    57.790149"
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We use our quarters as \n",
    "df21.index = ['21q1', '21q2', '21q3', '21q4']\n",
    "\n",
    "# Inspecting\n",
    "df21"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "fefac345",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/sn/wq_2w76s333b7xmhtx39fzs80000gn/T/ipykernel_59827/845338000.py:12: UserWarning: FixedFormatter should only be used together with FixedLocator\n",
      "  ax.set_xticklabels(df21.index, rotation=45)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Setting up all our subplots\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "# Editing each bars\n",
    "ax.bar(df21.index, df21[\"mac_share\"], label= \"mac_share\")\n",
    "ax.bar(df21.index, df21[\"service_share\"], label = \"service_share\", bottom = df21[\"mac_share\"])\n",
    "ax.bar(df21.index, df21[\"accessories_share\"], label = \"accessories_share\", bottom = df21[\"service_share\"] + df21[\"mac_share\"])\n",
    "ax.bar(df21.index, df21[\"ipad_share\"], label = \"ipad_share\", bottom = df21[\"service_share\"] + df21[\"mac_share\"] + df21[\"accessories_share\"])\n",
    "ax.bar(df21.index, df21[\"iphone_share\"], label = \"iphone_share\", bottom = df21[\"service_share\"] + df21[\"mac_share\"] + df21[\"accessories_share\"] + df21[\"ipad_share\"])\n",
    "\n",
    "# Adding graphs element\n",
    "ax.set_xticklabels(df21.index, rotation=45)\n",
    "ax.set_ylabel(\"Sales shares in %\")\n",
    "ax.legend()\n",
    "\n",
    "# Showing graphs\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1203d57f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
